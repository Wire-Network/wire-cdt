<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="classsysio_1_1symbol__code" kind="class" language="C++" prot="public">
    <compoundname>sysio::symbol_code</compoundname>
    <includes refid="symbol_8hpp" local="no">symbol.hpp</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classsysio_1_1symbol__code_1a40bf44f9a09cbf5028fc14fed168b264" prot="private" static="no" mutable="no">
        <type>uint64_t</type>
        <definition>uint64_t sysio::symbol_code::value</definition>
        <argsstring></argsstring>
        <name>value</name>
        <qualifiedname>sysio::symbol_code::value</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/symbol.hpp" line="204" column="16" bodyfile="libraries/sysiolib/core/sysio/symbol.hpp" bodystart="204" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classsysio_1_1symbol__code_a5c43c7f76b233ac43f9722f28602825c_1a5c43c7f76b233ac43f9722f28602825c" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>sysio::symbol_code::symbol_code</definition>
        <argsstring>()</argsstring>
        <name>symbol_code</name>
        <qualifiedname>sysio::symbol_code::symbol_code</qualifiedname>
        <briefdescription>
<para>Construct a new <ref refid="classsysio_1_1symbol__code" kindref="compound">symbol_code</ref> object defaulting to a value of 0. </para>
        </briefdescription>
        <detaileddescription>
<para>Default constructor, construct a new <ref refid="classsysio_1_1symbol__code" kindref="compound">symbol_code</ref></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/symbol.hpp" line="38" column="17" bodyfile="libraries/sysiolib/core/sysio/symbol.hpp" bodystart="38" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="classsysio_1_1symbol__code_a74becedb343a7d04b5a4929b2328d753_1a74becedb343a7d04b5a4929b2328d753" prot="public" static="no" constexpr="yes" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>sysio::symbol_code::symbol_code</definition>
        <argsstring>(uint64_t raw)</argsstring>
        <name>symbol_code</name>
        <qualifiedname>sysio::symbol_code::symbol_code</qualifiedname>
        <param>
          <type>uint64_t</type>
          <declname>raw</declname>
        </param>
        <briefdescription>
<para>Construct a new <ref refid="classsysio_1_1symbol__code" kindref="compound">symbol_code</ref> object initialising value with raw. </para>
        </briefdescription>
        <detaileddescription>
<para>Construct a new <ref refid="classsysio_1_1symbol__code" kindref="compound">symbol_code</ref> given a scoped enumerated type of raw (uint64_t).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>raw</parametername>
</parameternamelist>
<parameterdescription>
<para>- The raw value which is a scoped enumerated type of unit64_t </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/symbol.hpp" line="47" column="26" bodyfile="libraries/sysiolib/core/sysio/symbol.hpp" bodystart="47" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="classsysio_1_1symbol__code_af6dba654d4b0fd161112d5c10474ec9b_1af6dba654d4b0fd161112d5c10474ec9b" prot="public" static="no" constexpr="yes" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>sysio::symbol_code::symbol_code</definition>
        <argsstring>(std::string_view str)</argsstring>
        <name>symbol_code</name>
        <qualifiedname>sysio::symbol_code::symbol_code</qualifiedname>
        <param>
          <type>std::string_view</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Construct a new <ref refid="classsysio_1_1symbol__code" kindref="compound">symbol_code</ref> object initialising value with str. </para>
        </briefdescription>
        <detaileddescription>
<para>Construct a new <ref refid="classsysio_1_1symbol__code" kindref="compound">symbol_code</ref> given an string.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>- The string value which validated then converted to unit64_t </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/symbol.hpp" line="58" column="26" bodyfile="libraries/sysiolib/core/sysio/symbol.hpp" bodystart="58" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="classsysio_1_1symbol__code_ad4a9ffa57efaed158c8655c05042989d_1ad4a9ffa57efaed158c8655c05042989d" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool sysio::symbol_code::is_valid</definition>
        <argsstring>() const</argsstring>
        <name>is_valid</name>
        <qualifiedname>sysio::symbol_code::is_valid</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Checks if the symbol code is valid <simplesect kind="return"><para>true - if symbol is valid </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/symbol.hpp" line="77" column="22" bodyfile="libraries/sysiolib/core/sysio/symbol.hpp" bodystart="77" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="classsysio_1_1symbol__code_a606412e47e771c284545b98baad6e3ca_1a606412e47e771c284545b98baad6e3ca" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t sysio::symbol_code::length</definition>
        <argsstring>() const</argsstring>
        <name>length</name>
        <qualifiedname>sysio::symbol_code::length</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the character length of the provided symbol</para>
<para><simplesect kind="return"><para>length - character length of the provided symbol </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/symbol.hpp" line="99" column="26" bodyfile="libraries/sysiolib/core/sysio/symbol.hpp" bodystart="99" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="classsysio_1_1symbol__code_acc936d74d687b70d9af776cc3c86332e_1acc936d74d687b70d9af776cc3c86332e" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t sysio::symbol_code::raw</definition>
        <argsstring>() const</argsstring>
        <name>raw</name>
        <qualifiedname>sysio::symbol_code::raw</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Casts a symbol code to raw</para>
<para><simplesect kind="return"><para>Returns an instance of raw based on the value of a <ref refid="classsysio_1_1symbol__code" kindref="compound">symbol_code</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/symbol.hpp" line="114" column="26" bodyfile="libraries/sysiolib/core/sysio/symbol.hpp" bodystart="114" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="classsysio_1_1symbol__code_a1a807ec84998c7df295c1a29056da775_1a1a807ec84998c7df295c1a29056da775" prot="public" static="no" constexpr="yes" const="yes" explicit="yes" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>sysio::symbol_code::operator bool</definition>
        <argsstring>() const</argsstring>
        <name>operator bool</name>
        <qualifiedname>sysio::symbol_code::operator bool</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Explicit cast to bool of the <ref refid="classsysio_1_1symbol__code" kindref="compound">symbol_code</ref></para>
<para><simplesect kind="return"><para>Returns true if the <ref refid="classsysio_1_1symbol__code" kindref="compound">symbol_code</ref> is set to the default value of 0 else true. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/symbol.hpp" line="121" column="26" bodyfile="libraries/sysiolib/core/sysio/symbol.hpp" bodystart="121" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="classsysio_1_1symbol__code_a5bb5b7cc09e93242e4b64da6a27ae4dc_1a5bb5b7cc09e93242e4b64da6a27ae4dc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>char *</type>
        <definition>char * sysio::symbol_code::write_as_string</definition>
        <argsstring>(char *begin, char *end, bool dry_run=false) const</argsstring>
        <name>write_as_string</name>
        <qualifiedname>sysio::symbol_code::write_as_string</qualifiedname>
        <param>
          <type>char *</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>end</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>dry_run</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Writes the <ref refid="classsysio_1_1symbol__code" kindref="compound">symbol_code</ref> as a string to the provided char buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Writes the <ref refid="classsysio_1_1symbol__code" kindref="compound">symbol_code</ref> as a string to the provided char buffer</para>
<para><simplesect kind="pre"><para><ref refid="classsysio_1_1symbol__code_ad4a9ffa57efaed158c8655c05042989d_1ad4a9ffa57efaed158c8655c05042989d" kindref="member">is_valid()</ref> == true </para>
</simplesect>
<simplesect kind="pre"><para>The range [begin, end) must be a valid range of memory to write to. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>begin</parametername>
</parameternamelist>
<parameterdescription>
<para>- The start of the char buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>- Just past the end of the char buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dry_run</parametername>
</parameternamelist>
<parameterdescription>
<para>- If true, do not actually write anything into the range. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>char* - Just past the end of the last character that would be written assuming dry_run == false and end was large enough to provide sufficient space. (Meaning only applies if returned pointer &gt;= begin.) </para>
</simplesect>
<simplesect kind="post"><para>If the output string fits within the range [begin, end) and dry_run == false, the range [begin, returned pointer) contains the string representation of the <ref refid="classsysio_1_1symbol__code" kindref="compound">symbol_code</ref>. Nothing is written if dry_run == true or returned pointer &gt; end (insufficient space) or if returned pointer &lt; begin (overflow in calculating desired end). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/symbol.hpp" line="136" column="12" bodyfile="libraries/sysiolib/core/sysio/symbol.hpp" bodystart="136" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="classsysio_1_1symbol__code_a906ff6ed7170ee03107a3040034f0eef_1a906ff6ed7170ee03107a3040034f0eef" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string sysio::symbol_code::to_string</definition>
        <argsstring>() const</argsstring>
        <name>to_string</name>
        <qualifiedname>sysio::symbol_code::to_string</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the name value as a string by calling <ref refid="classsysio_1_1symbol__code_a5bb5b7cc09e93242e4b64da6a27ae4dc_1a5bb5b7cc09e93242e4b64da6a27ae4dc" kindref="member">write_as_string()</ref> and returning the buffer produced by <ref refid="classsysio_1_1symbol__code_a5bb5b7cc09e93242e4b64da6a27ae4dc_1a5bb5b7cc09e93242e4b64da6a27ae4dc" kindref="member">write_as_string()</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/symbol.hpp" line="158" column="19" bodyfile="libraries/sysiolib/core/sysio/symbol.hpp" bodystart="158" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="classsysio_1_1symbol__code_a1e5440fb1800bc8de16d5254b331c7a0_1a1e5440fb1800bc8de16d5254b331c7a0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void sysio::symbol_code::print</definition>
        <argsstring>() const</argsstring>
        <name>print</name>
        <qualifiedname>sysio::symbol_code::print</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Prints a <ref refid="classsysio_1_1symbol__code" kindref="compound">symbol_code</ref></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sym_code</parametername>
</parameternamelist>
<parameterdescription>
<para>symbol code to be printed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/symbol.hpp" line="169" column="19" bodyfile="libraries/sysiolib/core/sysio/symbol.hpp" bodystart="169" bodyend="174"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="friend">
      <memberdef kind="friend" id="classsysio_1_1symbol__code_a679be838b5e39b806fa42577124a214a_1a679be838b5e39b806fa42577124a214a" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const symbol_code &amp;a, const symbol_code &amp;b)</argsstring>
        <name>operator==</name>
        <qualifiedname>sysio::symbol_code::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classsysio_1_1symbol__code" kindref="compound">symbol_code</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classsysio_1_1symbol__code" kindref="compound">symbol_code</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Equivalency operator. Returns true if a == b (are the same)</para>
<para><simplesect kind="return"><para>boolean - true if both provided symbol_codes are the same </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/symbol.hpp" line="181" column="29" bodyfile="libraries/sysiolib/core/sysio/symbol.hpp" bodystart="181" bodyend="183"/>
      </memberdef>
      <memberdef kind="friend" id="classsysio_1_1symbol__code_acd21f55772dbdf25fe5dbc182683fee0_1acd21f55772dbdf25fe5dbc182683fee0" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const symbol_code &amp;a, const symbol_code &amp;b)</argsstring>
        <name>operator!=</name>
        <qualifiedname>sysio::symbol_code::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="classsysio_1_1symbol__code" kindref="compound">symbol_code</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classsysio_1_1symbol__code" kindref="compound">symbol_code</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Inverted equivalency operator. Returns true if a != b (are different)</para>
<para><simplesect kind="return"><para>boolean - true if both provided symbol_codes are not the same </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/symbol.hpp" line="190" column="29" bodyfile="libraries/sysiolib/core/sysio/symbol.hpp" bodystart="190" bodyend="192"/>
      </memberdef>
      <memberdef kind="friend" id="classsysio_1_1symbol__code_a8dd79cc2a20dc7bf2788fd6416003891_1a8dd79cc2a20dc7bf2788fd6416003891" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&lt;</definition>
        <argsstring>(const symbol_code &amp;a, const symbol_code &amp;b)</argsstring>
        <name>operator&lt;</name>
        <qualifiedname>sysio::symbol_code::operator&lt;</qualifiedname>
        <param>
          <type>const <ref refid="classsysio_1_1symbol__code" kindref="compound">symbol_code</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classsysio_1_1symbol__code" kindref="compound">symbol_code</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Less than operator. </para>
        </briefdescription>
        <detaileddescription>
<para>Less than operator. Returns true if a &lt; b. <simplesect kind="return"><para>boolean - true if <ref refid="classsysio_1_1symbol__code" kindref="compound">symbol_code</ref> <computeroutput>a</computeroutput> is less than <computeroutput>b</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/symbol.hpp" line="199" column="24" bodyfile="libraries/sysiolib/core/sysio/symbol.hpp" bodystart="199" bodyend="201"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Stores the symbol code as a uint64_t value </para>
    </detaileddescription>
    <location file="libraries/sysiolib/core/sysio/symbol.hpp" line="29" column="4" bodyfile="libraries/sysiolib/core/sysio/symbol.hpp" bodystart="29" bodyend="205"/>
    <listofallmembers>
      <member refid="classsysio_1_1symbol__code_ad4a9ffa57efaed158c8655c05042989d_1ad4a9ffa57efaed158c8655c05042989d" prot="public" virt="non-virtual"><scope>sysio::symbol_code</scope><name>is_valid</name></member>
      <member refid="classsysio_1_1symbol__code_a606412e47e771c284545b98baad6e3ca_1a606412e47e771c284545b98baad6e3ca" prot="public" virt="non-virtual"><scope>sysio::symbol_code</scope><name>length</name></member>
      <member refid="classsysio_1_1symbol__code_a1a807ec84998c7df295c1a29056da775_1a1a807ec84998c7df295c1a29056da775" prot="public" virt="non-virtual"><scope>sysio::symbol_code</scope><name>operator bool</name></member>
      <member refid="classsysio_1_1symbol__code_acd21f55772dbdf25fe5dbc182683fee0_1acd21f55772dbdf25fe5dbc182683fee0" prot="public" virt="non-virtual"><scope>sysio::symbol_code</scope><name>operator!=</name></member>
      <member refid="classsysio_1_1symbol__code_a8dd79cc2a20dc7bf2788fd6416003891_1a8dd79cc2a20dc7bf2788fd6416003891" prot="public" virt="non-virtual"><scope>sysio::symbol_code</scope><name>operator&lt;</name></member>
      <member refid="classsysio_1_1symbol__code_a679be838b5e39b806fa42577124a214a_1a679be838b5e39b806fa42577124a214a" prot="public" virt="non-virtual"><scope>sysio::symbol_code</scope><name>operator==</name></member>
      <member refid="classsysio_1_1symbol__code_a1e5440fb1800bc8de16d5254b331c7a0_1a1e5440fb1800bc8de16d5254b331c7a0" prot="public" virt="non-virtual"><scope>sysio::symbol_code</scope><name>print</name></member>
      <member refid="classsysio_1_1symbol__code_acc936d74d687b70d9af776cc3c86332e_1acc936d74d687b70d9af776cc3c86332e" prot="public" virt="non-virtual"><scope>sysio::symbol_code</scope><name>raw</name></member>
      <member refid="classsysio_1_1symbol__code_a5c43c7f76b233ac43f9722f28602825c_1a5c43c7f76b233ac43f9722f28602825c" prot="public" virt="non-virtual"><scope>sysio::symbol_code</scope><name>symbol_code</name></member>
      <member refid="classsysio_1_1symbol__code_a74becedb343a7d04b5a4929b2328d753_1a74becedb343a7d04b5a4929b2328d753" prot="public" virt="non-virtual"><scope>sysio::symbol_code</scope><name>symbol_code</name></member>
      <member refid="classsysio_1_1symbol__code_af6dba654d4b0fd161112d5c10474ec9b_1af6dba654d4b0fd161112d5c10474ec9b" prot="public" virt="non-virtual"><scope>sysio::symbol_code</scope><name>symbol_code</name></member>
      <member refid="classsysio_1_1symbol__code_a906ff6ed7170ee03107a3040034f0eef_1a906ff6ed7170ee03107a3040034f0eef" prot="public" virt="non-virtual"><scope>sysio::symbol_code</scope><name>to_string</name></member>
      <member refid="classsysio_1_1symbol__code_1a40bf44f9a09cbf5028fc14fed168b264" prot="private" virt="non-virtual"><scope>sysio::symbol_code</scope><name>value</name></member>
      <member refid="classsysio_1_1symbol__code_a5bb5b7cc09e93242e4b64da6a27ae4dc_1a5bb5b7cc09e93242e4b64da6a27ae4dc" prot="public" virt="non-virtual"><scope>sysio::symbol_code</scope><name>write_as_string</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
