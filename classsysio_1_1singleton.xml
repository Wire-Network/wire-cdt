<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="classsysio_1_1singleton" kind="class" language="C++" prot="public">
    <compoundname>sysio::singleton</compoundname>
    <includes refid="singleton_8hpp" local="no">singleton.hpp</includes>
    <innerclass refid="structsysio_1_1singleton_1_1row" prot="private">sysio::singleton::row</innerclass>
    <templateparamlist>
      <param>
        <type><ref refid="structsysio_1_1name_a1462b64fcb07730f984669b55994128b_1a1462b64fcb07730f984669b55994128b" kindref="member">name::raw</ref></type>
        <declname>SingletonName</declname>
        <defname>SingletonName</defname>
      </param>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
    <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classsysio_1_1singleton_1ac291b74a5935be5e11c36a5009a8d0a4" prot="private" static="no">
        <type><ref refid="classsysio_1_1multi__index" kindref="compound">sysio::multi_index</ref>&lt; SingletonName, row &gt;</type>
        <definition>sysio::multi_index&lt;SingletonName, row&gt; sysio::singleton&lt; SingletonName, T &gt;::table</definition>
        <argsstring></argsstring>
        <name>table</name>
        <qualifiedname>sysio::singleton::table</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/contracts/sysio/singleton.hpp" line="47" column="34" bodyfile="libraries/sysiolib/contracts/sysio/singleton.hpp" bodystart="47" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classsysio_1_1singleton_1a9fd30383423d559b1d20ff22c5361bda" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>uint64_t</type>
        <definition>uint64_t sysio::singleton&lt; SingletonName, T &gt;::pk_value</definition>
        <argsstring></argsstring>
        <name>pk_value</name>
        <qualifiedname>sysio::singleton::pk_value</qualifiedname>
        <initializer>= static_cast&lt;uint64_t&gt;(SingletonName)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Primary key of the data inside singleton table </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/contracts/sysio/singleton.hpp" line="26" column="33" bodyfile="libraries/sysiolib/contracts/sysio/singleton.hpp" bodystart="26" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classsysio_1_1singleton_1abd8676da901cb30f1c46a2f3a863baf2" prot="private" static="no" mutable="no">
        <type><ref refid="classsysio_1_1multi__index" kindref="compound">table</ref></type>
        <definition>table sysio::singleton&lt; SingletonName, T &gt;::_t</definition>
        <argsstring></argsstring>
        <name>_t</name>
        <qualifiedname>sysio::singleton::_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/contracts/sysio/singleton.hpp" line="131" column="16" bodyfile="libraries/sysiolib/contracts/sysio/singleton.hpp" bodystart="131" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classsysio_1_1singleton_a44e8504cc55f0db8d1c9f55f74497d04_1a44e8504cc55f0db8d1c9f55f74497d04" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>sysio::singleton&lt; SingletonName, T &gt;::singleton</definition>
        <argsstring>(name code, uint64_t scope)</argsstring>
        <name>singleton</name>
        <qualifiedname>sysio::singleton::singleton</qualifiedname>
        <param>
          <type><ref refid="structsysio_1_1name" kindref="compound">name</ref></type>
          <declname>code</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>scope</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Construct a new singleton object given the table&apos;s owner and the scope</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>- The table&apos;s owner </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scope</parametername>
</parameternamelist>
<parameterdescription>
<para>- The scope of the table </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/contracts/sysio/singleton.hpp" line="57" column="10" bodyfile="libraries/sysiolib/contracts/sysio/singleton.hpp" bodystart="57" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="classsysio_1_1singleton_adaf08658ea5c6f63ba625ef14c2adec0_1adaf08658ea5c6f63ba625ef14c2adec0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool sysio::singleton&lt; SingletonName, T &gt;::exists</definition>
        <argsstring>()</argsstring>
        <name>exists</name>
        <qualifiedname>sysio::singleton::exists</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check if the singleton table exists</para>
<para><simplesect kind="return"><para>true - if exists </para>
</simplesect>
<simplesect kind="return"><para>false - otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/contracts/sysio/singleton.hpp" line="65" column="15" bodyfile="libraries/sysiolib/contracts/sysio/singleton.hpp" bodystart="65" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="classsysio_1_1singleton_aff388b46616a2768a5b896416deb7b21_1aff388b46616a2768a5b896416deb7b21" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T sysio::singleton&lt; SingletonName, T &gt;::get</definition>
        <argsstring>()</argsstring>
        <name>get</name>
        <qualifiedname>sysio::singleton::get</qualifiedname>
        <briefdescription>
<para>Get the value stored inside the singleton table. </para>
        </briefdescription>
        <detaileddescription>
<para>Get the value stored inside the singleton table. Will throw an exception if it doesn&apos;t exist</para>
<para><simplesect kind="return"><para>T - The value stored </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/contracts/sysio/singleton.hpp" line="75" column="12" bodyfile="libraries/sysiolib/contracts/sysio/singleton.hpp" bodystart="75" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="classsysio_1_1singleton_a885a6b8fbd03404ced7033beaab0c28e_1a885a6b8fbd03404ced7033beaab0c28e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T sysio::singleton&lt; SingletonName, T &gt;::get_or_default</definition>
        <argsstring>(const T &amp;def=T())</argsstring>
        <name>get_or_default</name>
        <qualifiedname>sysio::singleton::get_or_default</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>def</declname>
          <defval>T()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the value stored inside the singleton table. If it doesn&apos;t exist, it will return the specified default value</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>def</parametername>
</parameternamelist>
<parameterdescription>
<para>- The default value to be returned in case the data doesn&apos;t exist </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>T - The value stored </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/contracts/sysio/singleton.hpp" line="87" column="12" bodyfile="libraries/sysiolib/contracts/sysio/singleton.hpp" bodystart="87" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="classsysio_1_1singleton_a46a0a3204e04e50925ad5f6bc210c2f5_1a46a0a3204e04e50925ad5f6bc210c2f5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T sysio::singleton&lt; SingletonName, T &gt;::get_or_create</definition>
        <argsstring>(name bill_to_account, const T &amp;def=T())</argsstring>
        <name>get_or_create</name>
        <qualifiedname>sysio::singleton::get_or_create</qualifiedname>
        <param>
          <type><ref refid="structsysio_1_1name" kindref="compound">name</ref></type>
          <declname>bill_to_account</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>def</declname>
          <defval>T()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the value stored inside the singleton table. If it doesn&apos;t exist, it will create a new one with the specified default value</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bill_to_account</parametername>
</parameternamelist>
<parameterdescription>
<para>- The account to bill for the newly created data if the data doesn&apos;t exist </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>def</parametername>
</parameternamelist>
<parameterdescription>
<para>- The default value to be created in case the data doesn&apos;t exist </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>T - The value stored </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/contracts/sysio/singleton.hpp" line="99" column="12" bodyfile="libraries/sysiolib/contracts/sysio/singleton.hpp" bodystart="99" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="classsysio_1_1singleton_a9fd38b11bb36c05e2df88a2b2cb0329f_1a9fd38b11bb36c05e2df88a2b2cb0329f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void sysio::singleton&lt; SingletonName, T &gt;::set</definition>
        <argsstring>(const T &amp;value, name bill_to_account)</argsstring>
        <name>set</name>
        <qualifiedname>sysio::singleton::set</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="structsysio_1_1name" kindref="compound">name</ref></type>
          <declname>bill_to_account</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set new value to the singleton table</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>- New value to be set </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bill_to_account</parametername>
</parameternamelist>
<parameterdescription>
<para>- Account to pay for the new value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/contracts/sysio/singleton.hpp" line="111" column="15" bodyfile="libraries/sysiolib/contracts/sysio/singleton.hpp" bodystart="111" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="classsysio_1_1singleton_a9154b8b392d383a71a4207deeb9bda5f_1a9154b8b392d383a71a4207deeb9bda5f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void sysio::singleton&lt; SingletonName, T &gt;::remove</definition>
        <argsstring>()</argsstring>
        <name>remove</name>
        <qualifiedname>sysio::singleton::remove</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Remove the only data inside singleton table </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/contracts/sysio/singleton.hpp" line="123" column="15" bodyfile="libraries/sysiolib/contracts/sysio/singleton.hpp" bodystart="123" bodyend="128"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>This wrapper uses a single table to store named objects various types.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>SingletonName</parametername>
</parameternamelist>
<parameterdescription>
<para>- the name of this singleton variable </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>- the type of the singleton </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <location file="libraries/sysiolib/contracts/sysio/singleton.hpp" line="21" column="4" bodyfile="libraries/sysiolib/contracts/sysio/singleton.hpp" bodystart="22" bodyend="132"/>
    <listofallmembers>
      <member refid="classsysio_1_1singleton_1abd8676da901cb30f1c46a2f3a863baf2" prot="private" virt="non-virtual"><scope>sysio::singleton</scope><name>_t</name></member>
      <member refid="classsysio_1_1singleton_adaf08658ea5c6f63ba625ef14c2adec0_1adaf08658ea5c6f63ba625ef14c2adec0" prot="public" virt="non-virtual"><scope>sysio::singleton</scope><name>exists</name></member>
      <member refid="classsysio_1_1singleton_aff388b46616a2768a5b896416deb7b21_1aff388b46616a2768a5b896416deb7b21" prot="public" virt="non-virtual"><scope>sysio::singleton</scope><name>get</name></member>
      <member refid="classsysio_1_1singleton_a46a0a3204e04e50925ad5f6bc210c2f5_1a46a0a3204e04e50925ad5f6bc210c2f5" prot="public" virt="non-virtual"><scope>sysio::singleton</scope><name>get_or_create</name></member>
      <member refid="classsysio_1_1singleton_a885a6b8fbd03404ced7033beaab0c28e_1a885a6b8fbd03404ced7033beaab0c28e" prot="public" virt="non-virtual"><scope>sysio::singleton</scope><name>get_or_default</name></member>
      <member refid="classsysio_1_1singleton_1a9fd30383423d559b1d20ff22c5361bda" prot="private" virt="non-virtual"><scope>sysio::singleton</scope><name>pk_value</name></member>
      <member refid="classsysio_1_1singleton_a9154b8b392d383a71a4207deeb9bda5f_1a9154b8b392d383a71a4207deeb9bda5f" prot="public" virt="non-virtual"><scope>sysio::singleton</scope><name>remove</name></member>
      <member refid="classsysio_1_1singleton_a9fd38b11bb36c05e2df88a2b2cb0329f_1a9fd38b11bb36c05e2df88a2b2cb0329f" prot="public" virt="non-virtual"><scope>sysio::singleton</scope><name>set</name></member>
      <member refid="classsysio_1_1singleton_a44e8504cc55f0db8d1c9f55f74497d04_1a44e8504cc55f0db8d1c9f55f74497d04" prot="public" virt="non-virtual"><scope>sysio::singleton</scope><name>singleton</name></member>
      <member refid="classsysio_1_1singleton_1ac291b74a5935be5e11c36a5009a8d0a4" prot="private" virt="non-virtual"><scope>sysio::singleton</scope><name>table</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
