<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="group__dispatcher" kind="group">
    <compoundname>dispatcher</compoundname>
    <title>Dispatcher</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__dispatcher_1ga6fc508cd535786170ae5c758fe95f8f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Contract</type>
          </param>
          <param>
            <type>typename FirstAction</type>
          </param>
          <param>
            <type>typename SecondAction</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Actions</declname>
            <defname>Actions</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool sysio::dispatch</definition>
        <argsstring>(uint64_t code, uint64_t act)</argsstring>
        <name>dispatch</name>
        <param>
          <type>uint64_t</type>
          <declname>code</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>act</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method will dynamically dispatch an incoming set of actions to</para>
<para><programlisting><codeline><highlight class="normal">static<sp/>Contract::on(<sp/>ActionType<sp/>)</highlight></codeline>
</programlisting></para>
<para>For this to work the Actions must be derived from <ref refid="classsysio_1_1contract" kindref="compound">sysio::contract</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/contracts/sysio/dispatcher.hpp" line="44" column="9" bodyfile="libraries/sysiolib/contracts/sysio/dispatcher.hpp" bodystart="44" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="group__dispatcher_1gab3c58ff85e3081360360e9aafbad227a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool sysio::execute_action</definition>
        <argsstring>(name self, name code, void(T::*func)(Args...))</argsstring>
        <name>execute_action</name>
        <param>
          <type>name</type>
          <declname>self</declname>
        </param>
        <param>
          <type>name</type>
          <declname>code</declname>
        </param>
        <param>
          <type>void(T::*)(Args...)</type>
          <declname>func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unpack the received action and execute the correponding action handler</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>- The contract class that has the correponding action handler, this contract should be derived from <ref refid="classsysio_1_1contract" kindref="compound">sysio::contract</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Q</parametername>
</parameternamelist>
<parameterdescription>
<para>- The namespace of the action handler function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Args</parametername>
</parameternamelist>
<parameterdescription>
<para>- The arguments that the action handler accepts, i.e. members of the action </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>- The contract object that has the correponding action handler </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para>- The action handler </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/contracts/sysio/dispatcher.hpp" line="67" column="9" bodyfile="libraries/sysiolib/contracts/sysio/dispatcher.hpp" bodystart="67" bodyend="93"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__dispatcher_1ga2cf5a1a75578fbe4e722658ac2909833" prot="public" static="no">
        <name>SYSIO_DISPATCH</name>
        <param><defname>TYPE</defname></param>
        <param><defname>MEMBERS</defname></param>
        <initializer>extern &quot;C&quot; { \
   [[sysio::wasm_entry]] \
   void apply( uint64_t receiver, uint64_t code, uint64_t action ) { \
      if( code == receiver ) { \
         switch( action ) { \
            SYSIO_DISPATCH_HELPER( TYPE, MEMBERS ) \
         } \
         /* does not allow destructor of thiscontract to run: sysio_exit(0); */ \
      } \
   } \
} \</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convenient macro to create contract apply handler</para>
<para><simplesect kind="note"><para>To be able to use this macro, the contract needs to be derived from <ref refid="classsysio_1_1contract" kindref="compound">sysio::contract</ref> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>TYPE</parametername>
</parameternamelist>
<parameterdescription>
<para>- The class name of the contract </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>MEMBERS</parametername>
</parameternamelist>
<parameterdescription>
<para>- The sequence of available actions supported by this contract</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Example: <programlisting><codeline><highlight class="normal">SYSIO_DISPATCH(<sp/>sysio::bios,<sp/>(setpriv)(setalimits)(setglimits)(setprods)(reqauth)<sp/>)</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/contracts/sysio/dispatcher.hpp" line="122" column="9" bodyfile="libraries/sysiolib/contracts/sysio/dispatcher.hpp" bodystart="122" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Defines C++ functions to dispatch action to proper action handler inside a contract. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
