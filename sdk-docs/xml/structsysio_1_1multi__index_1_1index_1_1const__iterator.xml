<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="structsysio_1_1multi__index_1_1index_1_1const__iterator" kind="struct" language="C++" prot="public">
    <compoundname>sysio::multi_index::index::const_iterator</compoundname>
    <basecompoundref prot="public" virt="non-virtual">std::iterator&lt; std::bidirectional_iterator_tag, const T &gt;</basecompoundref>
    <includes refid="multi__index_8hpp" local="no">multi_index.hpp</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="structsysio_1_1multi__index_1_1index_1_1const__iterator_a98d9477848d2c563b310010a4f7b8fed_1a98d9477848d2c563b310010a4f7b8fed" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct</type>
        <definition>friend struct index</definition>
        <argsstring></argsstring>
        <name>index</name>
        <param>
          <type>index</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/contracts/sysio/multi_index.hpp" line="591" column="19" bodyfile="libraries/sysiolib/contracts/sysio/multi_index.hpp" bodystart="591" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="structsysio_1_1multi__index_1_1index_1_1const__iterator_ab0ac7de651351823aece097eb3be1cfb_1ab0ac7de651351823aece097eb3be1cfb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const const_iterator &amp;a, const const_iterator &amp;b)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structsysio_1_1multi__index_1_1index_1_1const__iterator" kindref="compound">const_iterator</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structsysio_1_1multi__index_1_1index_1_1const__iterator" kindref="compound">const_iterator</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/contracts/sysio/multi_index.hpp" line="510" column="31" bodyfile="libraries/sysiolib/contracts/sysio/multi_index.hpp" bodystart="510" bodyend="512"/>
      </memberdef>
      <memberdef kind="friend" id="structsysio_1_1multi__index_1_1index_1_1const__iterator_a5fbca5b71055f2b793ae1607239b13a0_1a5fbca5b71055f2b793ae1607239b13a0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const const_iterator &amp;a, const const_iterator &amp;b)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="structsysio_1_1multi__index_1_1index_1_1const__iterator" kindref="compound">const_iterator</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structsysio_1_1multi__index_1_1index_1_1const__iterator" kindref="compound">const_iterator</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/contracts/sysio/multi_index.hpp" line="513" column="31" bodyfile="libraries/sysiolib/contracts/sysio/multi_index.hpp" bodystart="513" bodyend="515"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structsysio_1_1multi__index_1_1index_1_1const__iterator_1a0c394fc8764f48faa82ce567b82d2ace" prot="private" static="no" mutable="no">
        <type>const <ref refid="structsysio_1_1multi__index_1_1index_1_1const__iterator_a98d9477848d2c563b310010a4f7b8fed_1a98d9477848d2c563b310010a4f7b8fed" kindref="member">index</ref> *</type>
        <definition>const index* sysio::multi_index&lt; TableName, T, Indices &gt;::index&lt; IndexName, Extractor, Number, IsConst &gt;::const_iterator::_idx</definition>
        <argsstring></argsstring>
        <name>_idx</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/contracts/sysio/multi_index.hpp" line="595" column="31" bodyfile="libraries/sysiolib/contracts/sysio/multi_index.hpp" bodystart="595" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structsysio_1_1multi__index_1_1index_1_1const__iterator_1a61f7d60287413179015acf92b3907c5d" prot="private" static="no" mutable="no">
        <type>const item *</type>
        <definition>const item* sysio::multi_index&lt; TableName, T, Indices &gt;::index&lt; IndexName, Extractor, Number, IsConst &gt;::const_iterator::_item</definition>
        <argsstring></argsstring>
        <name>_item</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/contracts/sysio/multi_index.hpp" line="596" column="31" bodyfile="libraries/sysiolib/contracts/sysio/multi_index.hpp" bodystart="596" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structsysio_1_1multi__index_1_1index_1_1const__iterator_aca596aa040b45d5c45de46e01e0c4ea2_1aca596aa040b45d5c45de46e01e0c4ea2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T&amp; sysio::multi_index&lt; TableName, T, Indices &gt;::index&lt; IndexName, Extractor, Number, IsConst &gt;::const_iterator::operator*</definition>
        <argsstring>() const</argsstring>
        <name>operator*</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/contracts/sysio/multi_index.hpp" line="517" column="27" bodyfile="libraries/sysiolib/contracts/sysio/multi_index.hpp" bodystart="517" bodyend="517"/>
      </memberdef>
      <memberdef kind="function" id="structsysio_1_1multi__index_1_1index_1_1const__iterator_a07fddc696fb1c9449df110d51fa48310_1a07fddc696fb1c9449df110d51fa48310" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const T *</type>
        <definition>const T* sysio::multi_index&lt; TableName, T, Indices &gt;::index&lt; IndexName, Extractor, Number, IsConst &gt;::const_iterator::operator-&gt;</definition>
        <argsstring>() const</argsstring>
        <name>operator-&gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/contracts/sysio/multi_index.hpp" line="518" column="27" bodyfile="libraries/sysiolib/contracts/sysio/multi_index.hpp" bodystart="518" bodyend="518"/>
      </memberdef>
      <memberdef kind="function" id="structsysio_1_1multi__index_1_1index_1_1const__iterator_a858609d2d5ad93392610544cda51deea_1a858609d2d5ad93392610544cda51deea" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structsysio_1_1multi__index_1_1index_1_1const__iterator" kindref="compound">const_iterator</ref></type>
        <definition>const_iterator sysio::multi_index&lt; TableName, T, Indices &gt;::index&lt; IndexName, Extractor, Number, IsConst &gt;::const_iterator::operator++</definition>
        <argsstring>(int)</argsstring>
        <name>operator++</name>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/contracts/sysio/multi_index.hpp" line="520" column="34" bodyfile="libraries/sysiolib/contracts/sysio/multi_index.hpp" bodystart="520" bodyend="524"/>
      </memberdef>
      <memberdef kind="function" id="structsysio_1_1multi__index_1_1index_1_1const__iterator_a1751fafad55c4dbcbd8a6f859c5287e7_1a1751fafad55c4dbcbd8a6f859c5287e7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structsysio_1_1multi__index_1_1index_1_1const__iterator" kindref="compound">const_iterator</ref></type>
        <definition>const_iterator sysio::multi_index&lt; TableName, T, Indices &gt;::index&lt; IndexName, Extractor, Number, IsConst &gt;::const_iterator::operator--</definition>
        <argsstring>(int)</argsstring>
        <name>operator--</name>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/contracts/sysio/multi_index.hpp" line="526" column="34" bodyfile="libraries/sysiolib/contracts/sysio/multi_index.hpp" bodystart="526" bodyend="530"/>
      </memberdef>
      <memberdef kind="function" id="structsysio_1_1multi__index_1_1index_1_1const__iterator_a668db3ddcb34e4991b310ce51d23de11_1a668db3ddcb34e4991b310ce51d23de11" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structsysio_1_1multi__index_1_1index_1_1const__iterator" kindref="compound">const_iterator</ref> &amp;</type>
        <definition>const_iterator&amp; sysio::multi_index&lt; TableName, T, Indices &gt;::index&lt; IndexName, Extractor, Number, IsConst &gt;::const_iterator::operator++</definition>
        <argsstring>()</argsstring>
        <name>operator++</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/contracts/sysio/multi_index.hpp" line="532" column="34" bodyfile="libraries/sysiolib/contracts/sysio/multi_index.hpp" bodystart="532" bodyend="557"/>
      </memberdef>
      <memberdef kind="function" id="structsysio_1_1multi__index_1_1index_1_1const__iterator_a11dc73fd97844ead6a92578bb19d14b3_1a11dc73fd97844ead6a92578bb19d14b3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structsysio_1_1multi__index_1_1index_1_1const__iterator" kindref="compound">const_iterator</ref> &amp;</type>
        <definition>const_iterator&amp; sysio::multi_index&lt; TableName, T, Indices &gt;::index&lt; IndexName, Extractor, Number, IsConst &gt;::const_iterator::operator--</definition>
        <argsstring>()</argsstring>
        <name>operator--</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/contracts/sysio/multi_index.hpp" line="559" column="34" bodyfile="libraries/sysiolib/contracts/sysio/multi_index.hpp" bodystart="559" bodyend="587"/>
      </memberdef>
      <memberdef kind="function" id="structsysio_1_1multi__index_1_1index_1_1const__iterator_a96a4f55014359e85feba85bdd0736901_1a96a4f55014359e85feba85bdd0736901" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>sysio::multi_index&lt; TableName, T, Indices &gt;::index&lt; IndexName, Extractor, Number, IsConst &gt;::const_iterator::const_iterator</definition>
        <argsstring>()</argsstring>
        <name>const_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/contracts/sysio/multi_index.hpp" line="589" column="19" bodyfile="libraries/sysiolib/contracts/sysio/multi_index.hpp" bodystart="589" bodyend="589"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="structsysio_1_1multi__index_1_1index_1_1const__iterator_1a752fff3d042766d74c20e4f7c6342770" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>sysio::multi_index&lt; TableName, T, Indices &gt;::index&lt; IndexName, Extractor, Number, IsConst &gt;::const_iterator::const_iterator</definition>
        <argsstring>(const index *idx, const item *i=nullptr)</argsstring>
        <name>const_iterator</name>
        <param>
          <type>const <ref refid="structsysio_1_1multi__index_1_1index_1_1const__iterator_a98d9477848d2c563b310010a4f7b8fed_1a98d9477848d2c563b310010a4f7b8fed" kindref="member">index</ref> *</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>const item *</type>
          <declname>i</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/contracts/sysio/multi_index.hpp" line="592" column="19" bodyfile="libraries/sysiolib/contracts/sysio/multi_index.hpp" bodystart="592" bodyend="593"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>std::iterator&lt; std::bidirectional_iterator_tag, const T &gt;</label>
      </node>
      <node id="1">
        <label>sysio::multi_index&lt; TableName, T, Indices &gt;::index&lt; IndexName, Extractor, Number, IsConst &gt;::const_iterator</label>
        <link refid="structsysio_1_1multi__index_1_1index_1_1const__iterator"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>std::iterator&lt; std::bidirectional_iterator_tag, const T &gt;</label>
      </node>
      <node id="1">
        <label>sysio::multi_index&lt; TableName, T, Indices &gt;::index&lt; IndexName, Extractor, Number, IsConst &gt;::const_iterator</label>
        <link refid="structsysio_1_1multi__index_1_1index_1_1const__iterator"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="libraries/sysiolib/contracts/sysio/multi_index.hpp" line="508" column="13" bodyfile="libraries/sysiolib/contracts/sysio/multi_index.hpp" bodystart="508" bodyend="597"/>
    <listofallmembers>
      <member refid="structsysio_1_1multi__index_1_1index_1_1const__iterator_1a0c394fc8764f48faa82ce567b82d2ace" prot="private" virt="non-virtual"><scope>sysio::multi_index::index::const_iterator</scope><name>_idx</name></member>
      <member refid="structsysio_1_1multi__index_1_1index_1_1const__iterator_1a61f7d60287413179015acf92b3907c5d" prot="private" virt="non-virtual"><scope>sysio::multi_index::index::const_iterator</scope><name>_item</name></member>
      <member refid="structsysio_1_1multi__index_1_1index_1_1const__iterator_a96a4f55014359e85feba85bdd0736901_1a96a4f55014359e85feba85bdd0736901" prot="public" virt="non-virtual"><scope>sysio::multi_index::index::const_iterator</scope><name>const_iterator</name></member>
      <member refid="structsysio_1_1multi__index_1_1index_1_1const__iterator_1a752fff3d042766d74c20e4f7c6342770" prot="private" virt="non-virtual"><scope>sysio::multi_index::index::const_iterator</scope><name>const_iterator</name></member>
      <member refid="structsysio_1_1multi__index_1_1index_1_1const__iterator_a98d9477848d2c563b310010a4f7b8fed_1a98d9477848d2c563b310010a4f7b8fed" prot="private" virt="non-virtual"><scope>sysio::multi_index::index::const_iterator</scope><name>index</name></member>
      <member refid="structsysio_1_1multi__index_1_1index_1_1const__iterator_a5fbca5b71055f2b793ae1607239b13a0_1a5fbca5b71055f2b793ae1607239b13a0" prot="public" virt="non-virtual"><scope>sysio::multi_index::index::const_iterator</scope><name>operator!=</name></member>
      <member refid="structsysio_1_1multi__index_1_1index_1_1const__iterator_aca596aa040b45d5c45de46e01e0c4ea2_1aca596aa040b45d5c45de46e01e0c4ea2" prot="public" virt="non-virtual"><scope>sysio::multi_index::index::const_iterator</scope><name>operator*</name></member>
      <member refid="structsysio_1_1multi__index_1_1index_1_1const__iterator_a858609d2d5ad93392610544cda51deea_1a858609d2d5ad93392610544cda51deea" prot="public" virt="non-virtual"><scope>sysio::multi_index::index::const_iterator</scope><name>operator++</name></member>
      <member refid="structsysio_1_1multi__index_1_1index_1_1const__iterator_a668db3ddcb34e4991b310ce51d23de11_1a668db3ddcb34e4991b310ce51d23de11" prot="public" virt="non-virtual"><scope>sysio::multi_index::index::const_iterator</scope><name>operator++</name></member>
      <member refid="structsysio_1_1multi__index_1_1index_1_1const__iterator_a1751fafad55c4dbcbd8a6f859c5287e7_1a1751fafad55c4dbcbd8a6f859c5287e7" prot="public" virt="non-virtual"><scope>sysio::multi_index::index::const_iterator</scope><name>operator--</name></member>
      <member refid="structsysio_1_1multi__index_1_1index_1_1const__iterator_a11dc73fd97844ead6a92578bb19d14b3_1a11dc73fd97844ead6a92578bb19d14b3" prot="public" virt="non-virtual"><scope>sysio::multi_index::index::const_iterator</scope><name>operator--</name></member>
      <member refid="structsysio_1_1multi__index_1_1index_1_1const__iterator_a07fddc696fb1c9449df110d51fa48310_1a07fddc696fb1c9449df110d51fa48310" prot="public" virt="non-virtual"><scope>sysio::multi_index::index::const_iterator</scope><name>operator-&gt;</name></member>
      <member refid="structsysio_1_1multi__index_1_1index_1_1const__iterator_ab0ac7de651351823aece097eb3be1cfb_1ab0ac7de651351823aece097eb3be1cfb" prot="public" virt="non-virtual"><scope>sysio::multi_index::index::const_iterator</scope><name>operator==</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
