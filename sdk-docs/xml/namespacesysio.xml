<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="namespacesysio" kind="namespace" language="C++">
    <compoundname>sysio</compoundname>
    <innerclass refid="structsysio_1_1asset" prot="public">sysio::asset</innerclass>
    <innerclass refid="structsysio_1_1extended__asset" prot="public">sysio::extended_asset</innerclass>
    <innerclass refid="classsysio_1_1binary__extension" prot="public">sysio::binary_extension</innerclass>
    <innerclass refid="structsysio_1_1ec__point" prot="public">sysio::ec_point</innerclass>
    <innerclass refid="structsysio_1_1ec__point__view" prot="public">sysio::ec_point_view</innerclass>
    <innerclass refid="classsysio_1_1datastream" prot="public">sysio::datastream</innerclass>
    <innerclass refid="classsysio_1_1datastream_3_01size__t_01_4" prot="public">sysio::datastream&lt; size_t &gt;</innerclass>
    <innerclass refid="classsysio_1_1fixed__bytes" prot="public">sysio::fixed_bytes</innerclass>
    <innerclass refid="structsysio_1_1ignore" prot="public">sysio::ignore</innerclass>
    <innerclass refid="structsysio_1_1ignore__wrapper" prot="public">sysio::ignore_wrapper</innerclass>
    <innerclass refid="structsysio_1_1name" prot="public">sysio::name</innerclass>
    <innerclass refid="classsysio_1_1iostream" prot="public">sysio::iostream</innerclass>
    <innerclass refid="structsysio_1_1overloaded" prot="public">sysio::overloaded</innerclass>
    <innerclass refid="classsysio_1_1rope" prot="public">sysio::rope</innerclass>
    <innerclass refid="classsysio_1_1string" prot="public">sysio::string</innerclass>
    <innerclass refid="classsysio_1_1symbol__code" prot="public">sysio::symbol_code</innerclass>
    <innerclass refid="classsysio_1_1symbol" prot="public">sysio::symbol</innerclass>
    <innerclass refid="classsysio_1_1extended__symbol" prot="public">sysio::extended_symbol</innerclass>
    <innerclass refid="classsysio_1_1microseconds" prot="public">sysio::microseconds</innerclass>
    <innerclass refid="classsysio_1_1time__point" prot="public">sysio::time_point</innerclass>
    <innerclass refid="classsysio_1_1time__point__sec" prot="public">sysio::time_point_sec</innerclass>
    <innerclass refid="classsysio_1_1block__timestamp" prot="public">sysio::block_timestamp</innerclass>
    <innerclass refid="structsysio_1_1unsigned__int" prot="public">sysio::unsigned_int</innerclass>
    <innerclass refid="structsysio_1_1signed__int" prot="public">sysio::signed_int</innerclass>
    <innerclass refid="structsysio_1_1permission__level" prot="public">sysio::permission_level</innerclass>
    <innerclass refid="structsysio_1_1action" prot="public">sysio::action</innerclass>
    <innerclass refid="structsysio_1_1action__wrapper" prot="public">sysio::action_wrapper</innerclass>
    <innerclass refid="structsysio_1_1variant__action__wrapper" prot="public">sysio::variant_action_wrapper</innerclass>
    <innerclass refid="structsysio_1_1inline__dispatcher" prot="public">sysio::inline_dispatcher</innerclass>
    <innerclass refid="structsysio_1_1inline__dispatcher_3_01void_07_t_1_1_5_08_07_args_8_8_8_08_00_01_name_01_4" prot="public">sysio::inline_dispatcher&lt; void(T::*)(Args...), Name &gt;</innerclass>
    <innerclass refid="classsysio_1_1contract" prot="public">sysio::contract</innerclass>
    <innerclass refid="structsysio_1_1const__mem__fun" prot="public">sysio::const_mem_fun</innerclass>
    <innerclass refid="structsysio_1_1indexed__by" prot="public">sysio::indexed_by</innerclass>
    <innerclass refid="classsysio_1_1multi__index" prot="public">sysio::multi_index</innerclass>
    <innerclass refid="structsysio_1_1blockchain__parameters" prot="public">sysio::blockchain_parameters</innerclass>
    <innerclass refid="structsysio_1_1producer__key" prot="public">sysio::producer_key</innerclass>
    <innerclass refid="structsysio_1_1producer__schedule" prot="public">sysio::producer_schedule</innerclass>
    <innerclass refid="structsysio_1_1key__weight" prot="public">sysio::key_weight</innerclass>
    <innerclass refid="structsysio_1_1block__signing__authority__v0" prot="public">sysio::block_signing_authority_v0</innerclass>
    <innerclass refid="structsysio_1_1producer__authority" prot="public">sysio::producer_authority</innerclass>
    <innerclass refid="structsysio_1_1security__group" prot="public">sysio::security_group</innerclass>
    <innerclass refid="classsysio_1_1singleton" prot="public">sysio::singleton</innerclass>
    <innerclass refid="classsysio_1_1transaction__header" prot="public">sysio::transaction_header</innerclass>
    <innerclass refid="classsysio_1_1transaction" prot="public">sysio::transaction</innerclass>
    <innerclass refid="structsysio_1_1onerror" prot="public">sysio::onerror</innerclass>
    <innernamespace refid="namespacesysio_1_1__datastream__detail">sysio::_datastream_detail</innernamespace>
    <innernamespace refid="namespacesysio_1_1__multi__index__detail">sysio::_multi_index_detail</innernamespace>
    <innernamespace refid="namespacesysio_1_1detail">sysio::detail</innernamespace>
    <innernamespace refid="namespacesysio_1_1impl">sysio::impl</innernamespace>
    <innernamespace refid="namespacesysio_1_1internal__use__do__not__use">sysio::internal_use_do_not_use</innernamespace>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespacesysio_a4190a754fba088fad4a22280d7186c61_1a4190a754fba088fad4a22280d7186c61" prot="public" static="no">
        <type><ref refid="structsysio_1_1ec__point" kindref="compound">ec_point</ref>&lt; g1_coordinate_size &gt;</type>
        <definition>using sysio::g1_point = typedef ec_point&lt;g1_coordinate_size&gt;</definition>
        <argsstring></argsstring>
        <name>g1_point</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/crypto_ext.hpp" line="182" column="4" bodyfile="libraries/sysiolib/core/sysio/crypto_ext.hpp" bodystart="182" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacesysio_ae435268c469c7c5f5e66d79611407b33_1ae435268c469c7c5f5e66d79611407b33" prot="public" static="no">
        <type><ref refid="structsysio_1_1ec__point" kindref="compound">ec_point</ref>&lt; g2_coordinate_size &gt;</type>
        <definition>using sysio::g2_point = typedef ec_point&lt;g2_coordinate_size&gt;</definition>
        <argsstring></argsstring>
        <name>g2_point</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/crypto_ext.hpp" line="183" column="4" bodyfile="libraries/sysiolib/core/sysio/crypto_ext.hpp" bodystart="183" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacesysio_a685154ac48bee2fca496891990abd818_1a685154ac48bee2fca496891990abd818" prot="public" static="no">
        <type><ref refid="structsysio_1_1ec__point__view" kindref="compound">ec_point_view</ref>&lt; g1_coordinate_size &gt;</type>
        <definition>using sysio::g1_point_view = typedef ec_point_view&lt;g1_coordinate_size&gt;</definition>
        <argsstring></argsstring>
        <name>g1_point_view</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/crypto_ext.hpp" line="184" column="4" bodyfile="libraries/sysiolib/core/sysio/crypto_ext.hpp" bodystart="184" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacesysio_a4b8d2d781e970505adfedd6930cc59e9_1a4b8d2d781e970505adfedd6930cc59e9" prot="public" static="no">
        <type><ref refid="structsysio_1_1ec__point__view" kindref="compound">ec_point_view</ref>&lt; g2_coordinate_size &gt;</type>
        <definition>using sysio::g2_point_view = typedef ec_point_view&lt;g2_coordinate_size&gt;</definition>
        <argsstring></argsstring>
        <name>g2_point_view</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/crypto_ext.hpp" line="185" column="4" bodyfile="libraries/sysiolib/core/sysio/crypto_ext.hpp" bodystart="185" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__crypto_gaaa0ff7b84df1a55dbe973d5a039d7855_1gaaa0ff7b84df1a55dbe973d5a039d7855" prot="public" static="no">
        <type>std::vector&lt; char &gt;</type>
        <definition>using sysio::bigint = typedef std::vector&lt;char&gt;</definition>
        <argsstring></argsstring>
        <name>bigint</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Big integer. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/crypto_ext.hpp" line="192" column="4" bodyfile="libraries/sysiolib/core/sysio/crypto_ext.hpp" bodystart="192" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacesysio_af2c4c03e101057e612a1f10082a0da14_1af2c4c03e101057e612a1f10082a0da14" prot="public" static="no">
        <type>std::string</type>
        <definition>using sysio::key_type = typedef std::string</definition>
        <argsstring></argsstring>
        <name>key_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/key_utils.hpp" line="74" column="1" bodyfile="libraries/sysiolib/core/sysio/key_utils.hpp" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__time_ga1d722e6bdb1a0a2cbabf7d1f48ce6301_1ga1d722e6bdb1a0a2cbabf7d1f48ce6301" prot="public" static="no">
        <type><ref refid="classsysio_1_1block__timestamp" kindref="compound">block_timestamp</ref></type>
        <definition>typedef block_timestamp sysio::block_timestamp_type</definition>
        <argsstring></argsstring>
        <name>block_timestamp_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/time.hpp" line="248" column="28" bodyfile="libraries/sysiolib/core/sysio/time.hpp" bodystart="248" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__producer__authority_ga8ac3f5039332dda52b6d41de63cda199_1ga8ac3f5039332dda52b6d41de63cda199" prot="public" static="no">
        <type>std::variant&lt; <ref refid="structsysio_1_1block__signing__authority__v0" kindref="compound">block_signing_authority_v0</ref> &gt;</type>
        <definition>using sysio::block_signing_authority = typedef std::variant&lt;block_signing_authority_v0&gt;</definition>
        <argsstring></argsstring>
        <name>block_signing_authority</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>variant of all possible block signing authorities </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/contracts/sysio/producer_schedule.hpp" line="136" column="4" bodyfile="libraries/sysiolib/contracts/sysio/producer_schedule.hpp" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacesysio_a252baef5945efdf97b45a27826131e16_1a252baef5945efdf97b45a27826131e16" prot="public" static="no">
        <type>uint32_t</type>
        <definition>using sysio::block_num_t = typedef uint32_t</definition>
        <argsstring></argsstring>
        <name>block_num_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/contracts/sysio/system.hpp" line="82" column="4" bodyfile="libraries/sysiolib/contracts/sysio/system.hpp" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__transaction_gaea468d1540eb797bbf89e247e44af21e_1gaea468d1540eb797bbf89e247e44af21e" prot="public" static="no">
        <type>std::tuple&lt; uint16_t, std::vector&lt; char &gt; &gt;</type>
        <definition>typedef std::tuple&lt;uint16_t, std::vector&lt;char&gt; &gt; sysio::extension</definition>
        <argsstring></argsstring>
        <name>extension</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/contracts/sysio/transaction.hpp" line="68" column="23" bodyfile="libraries/sysiolib/contracts/sysio/transaction.hpp" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__transaction_ga0e713744cc029ccaa6db4018766969a1_1ga0e713744cc029ccaa6db4018766969a1" prot="public" static="no">
        <type>std::vector&lt; <ref refid="group__transaction_gaea468d1540eb797bbf89e247e44af21e_1gaea468d1540eb797bbf89e247e44af21e" kindref="member">extension</ref> &gt;</type>
        <definition>typedef std::vector&lt;extension&gt; sysio::extensions_type</definition>
        <argsstring></argsstring>
        <name>extensions_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/contracts/sysio/transaction.hpp" line="73" column="24" bodyfile="libraries/sysiolib/contracts/sysio/transaction.hpp" bodystart="73" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespacesysio_1ab594c7e3b6612e77f90212fb08dada9d" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr size_t</type>
        <definition>constexpr size_t sysio::g1_coordinate_size</definition>
        <argsstring></argsstring>
        <name>g1_coordinate_size</name>
        <initializer>= 32</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/crypto_ext.hpp" line="179" column="28" bodyfile="libraries/sysiolib/core/sysio/crypto_ext.hpp" bodystart="179" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacesysio_1a480e01b1b0a16ea9307286909e34010a" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr size_t</type>
        <definition>constexpr size_t sysio::g2_coordinate_size</definition>
        <argsstring></argsstring>
        <name>g2_coordinate_size</name>
        <initializer>= 64</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/crypto_ext.hpp" line="180" column="28" bodyfile="libraries/sysiolib/core/sysio/crypto_ext.hpp" bodystart="180" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacesysio_1a9b4b665063f190115410a5133b8e6340" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr size_t</type>
        <definition>constexpr size_t sysio::blake2f_result_size</definition>
        <argsstring></argsstring>
        <name>blake2f_result_size</name>
        <initializer>= 64</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/crypto_ext.hpp" line="330" column="28" bodyfile="libraries/sysiolib/core/sysio/crypto_ext.hpp" bodystart="330" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacesysio_acbbfa0894fa08eef9bd94e0749612439_1acbbfa0894fa08eef9bd94e0749612439" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>uint8_t</type>
            <declname>Base</declname>
            <defname>Base</defname>
          </param>
          <param>
            <type>typename T</type>
            <defval>uint64_t</defval>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto sysio::powers_of_base</definition>
        <argsstring></argsstring>
        <name>powers_of_base</name>
        <initializer>= <ref refid="namespacesysio_1_1detail_aa51cce487fb83e710e3a83ebdb28d7ee_1aa51cce487fb83e710e3a83ebdb28d7ee" kindref="member">detail::generate_array</ref>&lt;<ref refid="structsysio_1_1detail_1_1largest__power" kindref="compound">detail::largest_power</ref>&lt;T, Base&gt;::exponent + 1&gt;( <ref refid="namespacesysio_1_1detail_ae0f37c92ed6b3534dd2a1cf2782ff3db_1ae0f37c92ed6b3534dd2a1cf2782ff3db" kindref="member">detail::pow_generator</ref>&lt;T, Base&gt; )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/powers.hpp" line="77" column="26" bodyfile="libraries/sysiolib/core/sysio/powers.hpp" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacesysio_1a32c166431f7c306243a721be558df68f" prot="public" static="yes" mutable="no">
        <type><ref refid="classsysio_1_1iostream" kindref="compound">iostream</ref></type>
        <definition>iostream sysio::cout</definition>
        <argsstring></argsstring>
        <name>cout</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/print.hpp" line="274" column="20" bodyfile="libraries/sysiolib/core/sysio/print.hpp" bodystart="274" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacesysio_1a4e850ba7fcc7c2ce8257936d31873e10" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr static <ref refid="structsysio_1_1name" kindref="compound">name</ref></type>
        <definition>constexpr static name sysio::same_payer</definition>
        <argsstring></argsstring>
        <name>same_payer</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/contracts/sysio/multi_index.hpp" line="213" column="30" bodyfile="libraries/sysiolib/contracts/sysio/multi_index.hpp" bodystart="213" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacesysio_a390880d5a350574add7d3e436a8400f9_1a390880d5a350574add7d3e436a8400f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* sysio::write_decimal</definition>
        <argsstring>(char *begin, char *end, bool dry_run, uint64_t number, uint8_t num_decimal_places, bool negative)</argsstring>
        <name>write_decimal</name>
        <param>
          <type>char *</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>end</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>dry_run</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>number</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>num_decimal_places</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>negative</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/asset.hpp" line="13" column="9" declfile="libraries/sysiolib/core/sysio/asset.hpp" declline="13" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__system_ga8f44fb02ae19a86ba7bcaa5672580334_1ga8f44fb02ae19a86ba7bcaa5672580334" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void sysio::check</definition>
        <argsstring>(bool pred, std::string_view msg)</argsstring>
        <name>check</name>
        <param>
          <type>bool</type>
          <declname>pred</declname>
        </param>
        <param>
          <type>std::string_view</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Assert if the predicate fails and use the supplied message.</para>
<para>Example: <programlisting><codeline><highlight class="normal">sysio::check(a<sp/>==<sp/>b,<sp/>&quot;a<sp/>does<sp/>not<sp/>equal<sp/>b&quot;);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/check.hpp" line="42" column="16" bodyfile="libraries/sysiolib/core/sysio/check.hpp" bodystart="42" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="group__system_ga5fdfb5e610f149b5280bc03d3f288b81_1ga5fdfb5e610f149b5280bc03d3f288b81" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void sysio::check</definition>
        <argsstring>(bool pred, const char *msg)</argsstring>
        <name>check</name>
        <param>
          <type>bool</type>
          <declname>pred</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Assert if the predicate fails and use the supplied message.</para>
<para>Example: <programlisting><codeline><highlight class="normal">sysio::check(a<sp/>==<sp/>b,<sp/>&quot;a<sp/>does<sp/>not<sp/>equal<sp/>b&quot;);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/check.hpp" line="57" column="16" bodyfile="libraries/sysiolib/core/sysio/check.hpp" bodystart="57" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="group__system_gaa065d823ab52c8386b4931c7a540d29b_1gaa065d823ab52c8386b4931c7a540d29b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void sysio::check</definition>
        <argsstring>(bool pred, const std::string &amp;msg)</argsstring>
        <name>check</name>
        <param>
          <type>bool</type>
          <declname>pred</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Assert if the predicate fails and use the supplied message.</para>
<para>Example: <programlisting><codeline><highlight class="normal">sysio::check(a<sp/>==<sp/>b,<sp/>&quot;a<sp/>does<sp/>not<sp/>equal<sp/>b&quot;);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/check.hpp" line="73" column="16" bodyfile="libraries/sysiolib/core/sysio/check.hpp" bodystart="73" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="group__system_ga76cd9ac08b61b1cf36e8cca30cc91465_1ga76cd9ac08b61b1cf36e8cca30cc91465" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void sysio::check</definition>
        <argsstring>(bool pred, std::string &amp;&amp;msg)</argsstring>
        <name>check</name>
        <param>
          <type>bool</type>
          <declname>pred</declname>
        </param>
        <param>
          <type>std::string &amp;&amp;</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Assert if the predicate fails and use the supplied message.</para>
<para>Example: <programlisting><codeline><highlight class="normal">sysio::check(a<sp/>==<sp/>b,<sp/>&quot;a<sp/>does<sp/>not<sp/>equal<sp/>b&quot;);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/check.hpp" line="89" column="16" bodyfile="libraries/sysiolib/core/sysio/check.hpp" bodystart="89" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="group__system_ga9a6b000dd9f96a11b3ed20ce96724fb6_1ga9a6b000dd9f96a11b3ed20ce96724fb6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void sysio::check</definition>
        <argsstring>(bool pred, const char *msg, size_t n)</argsstring>
        <name>check</name>
        <param>
          <type>bool</type>
          <declname>pred</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Assert if the predicate fails and use a subset of the supplied message.</para>
<para>Example: <programlisting><codeline><highlight class="normal">const<sp/>char*<sp/>msg<sp/>=<sp/>&quot;a<sp/>does<sp/>not<sp/>equal<sp/>b<sp/>b<sp/>does<sp/>not<sp/>equal<sp/>a&quot;;</highlight></codeline>
<codeline><highlight class="normal">sysio::check(a<sp/>==<sp/>b,<sp/>&quot;a<sp/>does<sp/>not<sp/>equal<sp/>b&quot;,<sp/>18);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/check.hpp" line="107" column="16" bodyfile="libraries/sysiolib/core/sysio/check.hpp" bodystart="107" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="group__system_gae97a231e3a459b32f9c15a98f2253b55_1gae97a231e3a459b32f9c15a98f2253b55" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void sysio::check</definition>
        <argsstring>(bool pred, const std::string &amp;msg, size_t n)</argsstring>
        <name>check</name>
        <param>
          <type>bool</type>
          <declname>pred</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Assert if the predicate fails and use a subset of the supplied message.</para>
<para>Example: <programlisting><codeline><highlight class="normal">std::string<sp/>msg<sp/>=<sp/>&quot;a<sp/>does<sp/>not<sp/>equal<sp/>b<sp/>b<sp/>does<sp/>not<sp/>equal<sp/>a&quot;;</highlight></codeline>
<codeline><highlight class="normal">sysio::check(a<sp/>==<sp/>b,<sp/>msg,<sp/>18);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/check.hpp" line="124" column="16" bodyfile="libraries/sysiolib/core/sysio/check.hpp" bodystart="124" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="group__system_gac4b2540d052e45f2e47e79daf2510860_1gac4b2540d052e45f2e47e79daf2510860" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void sysio::check</definition>
        <argsstring>(bool pred, uint64_t code)</argsstring>
        <name>check</name>
        <param>
          <type>bool</type>
          <declname>pred</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>code</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Assert if the predicate fails and use the supplied error code.</para>
<para>Example: <programlisting><codeline><highlight class="normal">sysio::check(a<sp/>==<sp/>b,<sp/>13);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/check.hpp" line="140" column="16" bodyfile="libraries/sysiolib/core/sysio/check.hpp" bodystart="140" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="namespacesysio_ab4b09384fc2f1644fb962d61dc210cdb_1ab4b09384fc2f1644fb962d61dc210cdb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structsysio_1_1name" kindref="compound">name</ref></type>
        <definition>name sysio::current_context_contract</definition>
        <argsstring>()</argsstring>
        <name>current_context_contract</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/context.hpp" line="10" column="16" bodyfile="libraries/sysiolib/core/sysio/context.hpp" bodystart="10" bodyend="10"/>
      </memberdef>
      <memberdef kind="function" id="group__crypto_ga0cd06321156dfab93ed85e67f6d6299e_1ga0cd06321156dfab93ed85e67f6d6299e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacesysio_a4190a754fba088fad4a22280d7186c61_1a4190a754fba088fad4a22280d7186c61" kindref="member">g1_point</ref></type>
        <definition>g1_point sysio::alt_bn128_add</definition>
        <argsstring>(const T &amp;op1, const T &amp;op2)</argsstring>
        <name>alt_bn128_add</name>
        <param>
          <type>const T &amp;</type>
          <declname>op1</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>op2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Addition operation on the elliptic curve <computeroutput>alt_bn128</computeroutput></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>op1</parametername>
</parameternamelist>
<parameterdescription>
<para>- operand 1 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>op2</parametername>
</parameternamelist>
<parameterdescription>
<para>- operand 2 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>result of the addition operation; throw if error </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/crypto_ext.hpp" line="203" column="20" bodyfile="libraries/sysiolib/core/sysio/crypto_ext.hpp" bodystart="203" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="group__crypto_gac0e8ec5424460d89710a63006fe6a893_1gac0e8ec5424460d89710a63006fe6a893" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t sysio::alt_bn128_add</definition>
        <argsstring>(const char *op1, uint32_t op1_len, const char *op2, uint32_t op2_len, char *result, uint32_t result_len)</argsstring>
        <name>alt_bn128_add</name>
        <param>
          <type>const char *</type>
          <declname>op1</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>op1_len</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>op2</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>op2_len</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>result</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>result_len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Addition operation on the elliptic curve <computeroutput>alt_bn128</computeroutput></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>op1</parametername>
</parameternamelist>
<parameterdescription>
<para>- operand 1 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>op1_len</parametername>
</parameternamelist>
<parameterdescription>
<para>- size of operand 1 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>op2</parametername>
</parameternamelist>
<parameterdescription>
<para>- operand 2 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>op2_len</parametername>
</parameternamelist>
<parameterdescription>
<para>- size of operand 2 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>- result of the addition operation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result_len</parametername>
</parameternamelist>
<parameterdescription>
<para>- size of result </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>-1 if there is an error otherwise 0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/crypto_ext.hpp" line="224" column="19" bodyfile="libraries/sysiolib/core/sysio/crypto_ext.hpp" bodystart="224" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="group__crypto_gaa4f388f1f3d837a04a391337429706b9_1gaa4f388f1f3d837a04a391337429706b9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacesysio_a4190a754fba088fad4a22280d7186c61_1a4190a754fba088fad4a22280d7186c61" kindref="member">g1_point</ref></type>
        <definition>g1_point sysio::alt_bn128_mul</definition>
        <argsstring>(const T &amp;g1, const bigint &amp;scalar)</argsstring>
        <name>alt_bn128_mul</name>
        <param>
          <type>const T &amp;</type>
          <declname>g1</declname>
        </param>
        <param>
          <type>const <ref refid="group__crypto_gaaa0ff7b84df1a55dbe973d5a039d7855_1gaaa0ff7b84df1a55dbe973d5a039d7855" kindref="member">bigint</ref> &amp;</type>
          <declname>scalar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Scalar multiplication operation on the elliptic curve <computeroutput>alt_bn128</computeroutput></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g1</parametername>
</parameternamelist>
<parameterdescription>
<para>- G1 point </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scalar</parametername>
</parameternamelist>
<parameterdescription>
<para>- scalar factor </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>result of the scalar multiplication operation; throw if error </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/crypto_ext.hpp" line="237" column="20" bodyfile="libraries/sysiolib/core/sysio/crypto_ext.hpp" bodystart="237" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="group__crypto_ga237fcc5e9afbb619321b4f3496c7c0c5_1ga237fcc5e9afbb619321b4f3496c7c0c5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t sysio::alt_bn128_mul</definition>
        <argsstring>(const char *g1, uint32_t g1_len, const char *scalar, uint32_t scalar_len, char *result, uint32_t result_len)</argsstring>
        <name>alt_bn128_mul</name>
        <param>
          <type>const char *</type>
          <declname>g1</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>g1_len</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>scalar</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>scalar_len</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>result</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>result_len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Scalar multiplication operation on the elliptic curve <computeroutput>alt_bn128</computeroutput></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g1</parametername>
</parameternamelist>
<parameterdescription>
<para>- G1 point </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>g1_len</parametername>
</parameternamelist>
<parameterdescription>
<para>- size of G1 point </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scalar</parametername>
</parameternamelist>
<parameterdescription>
<para>- scalar factor </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scalar_len</parametername>
</parameternamelist>
<parameterdescription>
<para>- size of scalar </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>- result of the scalar multiplication operation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result_len</parametername>
</parameternamelist>
<parameterdescription>
<para>- size of result </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>-1 if there is an error otherwise 0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/crypto_ext.hpp" line="257" column="19" bodyfile="libraries/sysiolib/core/sysio/crypto_ext.hpp" bodystart="257" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="group__crypto_ga0cde609525f7200ecc59467412b967ec_1ga0cde609525f7200ecc59467412b967ec" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename G1_T</type>
          </param>
          <param>
            <type>typename G2_T</type>
          </param>
        </templateparamlist>
        <type>int32_t</type>
        <definition>int32_t sysio::alt_bn128_pair</definition>
        <argsstring>(const std::vector&lt; std::pair&lt; G1_T, G2_T &gt;&gt; &amp;pairs)</argsstring>
        <name>alt_bn128_pair</name>
        <param>
          <type>const std::vector&lt; std::pair&lt; G1_T, G2_T &gt;&gt; &amp;</type>
          <declname>pairs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Optimal-Ate pairing check elliptic curve <computeroutput>alt_bn128</computeroutput></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pairs</parametername>
</parameternamelist>
<parameterdescription>
<para>- g1 and g2 pairs </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>-1 if there is an error, 1 if false and 0 if true and successful </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/crypto_ext.hpp" line="269" column="19" bodyfile="libraries/sysiolib/core/sysio/crypto_ext.hpp" bodystart="269" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="group__crypto_ga0437ba8953f498e91ff4265947c04ab7_1ga0437ba8953f498e91ff4265947c04ab7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t sysio::alt_bn128_pair</definition>
        <argsstring>(const char *pairs, uint32_t pairs_len)</argsstring>
        <name>alt_bn128_pair</name>
        <param>
          <type>const char *</type>
          <declname>pairs</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>pairs_len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Optimal-Ate pairing check elliptic curve <computeroutput>alt_bn128</computeroutput></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pairs</parametername>
</parameternamelist>
<parameterdescription>
<para>- g1 and g2 pairs </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pairs_len</parametername>
</parameternamelist>
<parameterdescription>
<para>- size of pairs </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>-1 if there is an error, 1 if false and 0 if true and successful </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/crypto_ext.hpp" line="288" column="19" bodyfile="libraries/sysiolib/core/sysio/crypto_ext.hpp" bodystart="288" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="group__crypto_gac7c345aafd080f87dd3ab935180784bf_1gac7c345aafd080f87dd3ab935180784bf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t sysio::mod_exp</definition>
        <argsstring>(const bigint &amp;base, const bigint &amp;exp, const bigint &amp;mod, bigint &amp;result)</argsstring>
        <name>mod_exp</name>
        <param>
          <type>const <ref refid="group__crypto_gaaa0ff7b84df1a55dbe973d5a039d7855_1gaaa0ff7b84df1a55dbe973d5a039d7855" kindref="member">bigint</ref> &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const <ref refid="group__crypto_gaaa0ff7b84df1a55dbe973d5a039d7855_1gaaa0ff7b84df1a55dbe973d5a039d7855" kindref="member">bigint</ref> &amp;</type>
          <declname>exp</declname>
        </param>
        <param>
          <type>const <ref refid="group__crypto_gaaa0ff7b84df1a55dbe973d5a039d7855_1gaaa0ff7b84df1a55dbe973d5a039d7855" kindref="member">bigint</ref> &amp;</type>
          <declname>mod</declname>
        </param>
        <param>
          <type><ref refid="group__crypto_gaaa0ff7b84df1a55dbe973d5a039d7855_1gaaa0ff7b84df1a55dbe973d5a039d7855" kindref="member">bigint</ref> &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Big integer modular exponentiation returns an output ( BASE^EXP ) % MOD</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>base</parametername>
</parameternamelist>
<parameterdescription>
<para>- base of the exponentiation (BASE) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>exp</parametername>
</parameternamelist>
<parameterdescription>
<para>- exponent to raise to that power (EXP) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mod</parametername>
</parameternamelist>
<parameterdescription>
<para>- modulus (MOD) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>- result of the modular exponentiation </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>-1 if there is an error otherwise 0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/crypto_ext.hpp" line="304" column="19" bodyfile="libraries/sysiolib/core/sysio/crypto_ext.hpp" bodystart="304" bodyend="308"/>
      </memberdef>
      <memberdef kind="function" id="group__crypto_ga75b8c0115f1f8090b29f9ddf9c87e252_1ga75b8c0115f1f8090b29f9ddf9c87e252" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t sysio::mod_exp</definition>
        <argsstring>(const char *base, uint32_t base_len, const char *exp, uint32_t exp_len, const char *mod, uint32_t mod_len, char *result, uint32_t result_len)</argsstring>
        <name>mod_exp</name>
        <param>
          <type>const char *</type>
          <declname>base</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>base_len</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>exp</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>exp_len</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>mod</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mod_len</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>result</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>result_len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Big integer modular exponentiation returns an output ( BASE^EXP ) % MOD</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>base</parametername>
</parameternamelist>
<parameterdescription>
<para>- base of the exponentiation (BASE) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>base_len</parametername>
</parameternamelist>
<parameterdescription>
<para>- size of base </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>exp</parametername>
</parameternamelist>
<parameterdescription>
<para>- exponent to raise to that power (EXP) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>exp_len</parametername>
</parameternamelist>
<parameterdescription>
<para>- size of exp </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mod</parametername>
</parameternamelist>
<parameterdescription>
<para>- modulus (MOD) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mod_len</parametername>
</parameternamelist>
<parameterdescription>
<para>- size of mod </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>- result of the modular exponentiation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result_len</parametername>
</parameternamelist>
<parameterdescription>
<para>- size of result </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>-1 if there is an error otherwise 0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/crypto_ext.hpp" line="326" column="19" bodyfile="libraries/sysiolib/core/sysio/crypto_ext.hpp" bodystart="326" bodyend="328"/>
      </memberdef>
      <memberdef kind="function" id="group__crypto_gaba4b9c3061aa17c41431c76e584e68a8_1gaba4b9c3061aa17c41431c76e584e68a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t sysio::blake2_f</definition>
        <argsstring>(uint32_t rounds, const std::vector&lt; char &gt; &amp;state, const std::vector&lt; char &gt; &amp;msg, const std::vector&lt; char &gt; &amp;t0_offset, const std::vector&lt; char &gt; &amp;t1_offset, bool final, std::vector&lt; char &gt; &amp;result)</argsstring>
        <name>blake2_f</name>
        <param>
          <type>uint32_t</type>
          <declname>rounds</declname>
        </param>
        <param>
          <type>const std::vector&lt; char &gt; &amp;</type>
          <declname>state</declname>
        </param>
        <param>
          <type>const std::vector&lt; char &gt; &amp;</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>const std::vector&lt; char &gt; &amp;</type>
          <declname>t0_offset</declname>
        </param>
        <param>
          <type>const std::vector&lt; char &gt; &amp;</type>
          <declname>t1_offset</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>final</declname>
        </param>
        <param>
          <type>std::vector&lt; char &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>BLAKE2 compression function &quot;F&quot; <ulink url="https://eips.ethereum.org/EIPS/eip-152">https://eips.ethereum.org/EIPS/eip-152</ulink></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rounds</parametername>
</parameternamelist>
<parameterdescription>
<para>- the number of rounds </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>state</parametername>
</parameternamelist>
<parameterdescription>
<para>- state vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>- message block vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t0_offset</parametername>
</parameternamelist>
<parameterdescription>
<para>- offset counters </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t1_offset</parametername>
</parameternamelist>
<parameterdescription>
<para>- offset counters </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>final</parametername>
</parameternamelist>
<parameterdescription>
<para>- final block flag </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>- the result of the compression </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>-1 if there is an error otherwise 0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/crypto_ext.hpp" line="346" column="12" bodyfile="libraries/sysiolib/core/sysio/crypto_ext.hpp" bodystart="346" bodyend="349"/>
      </memberdef>
      <memberdef kind="function" id="group__crypto_ga0f8f0fdac679ee9c5c4738c56398a870_1ga0f8f0fdac679ee9c5c4738c56398a870" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t sysio::blake2_f</definition>
        <argsstring>(uint32_t rounds, const char *state, uint32_t state_len, const char *msg, uint32_t msg_len, const char *t0_offset, uint32_t t0_len, const char *t1_offset, uint32_t t1_len, int32_t final, char *result, uint32_t result_len)</argsstring>
        <name>blake2_f</name>
        <param>
          <type>uint32_t</type>
          <declname>rounds</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>state</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>state_len</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>msg_len</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>t0_offset</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>t0_len</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>t1_offset</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>t1_len</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>final</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>result</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>result_len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>BLAKE2 compression function &quot;F&quot; <ulink url="https://eips.ethereum.org/EIPS/eip-152">https://eips.ethereum.org/EIPS/eip-152</ulink></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rounds</parametername>
</parameternamelist>
<parameterdescription>
<para>- the number of rounds </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>state</parametername>
</parameternamelist>
<parameterdescription>
<para>- state vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>state_len</parametername>
</parameternamelist>
<parameterdescription>
<para>- size of state vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>- message block vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msg_len</parametername>
</parameternamelist>
<parameterdescription>
<para>- size of message block vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t0_offset</parametername>
</parameternamelist>
<parameterdescription>
<para>- offset counters </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t0_len</parametername>
</parameternamelist>
<parameterdescription>
<para>- size of t0_offset </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t1_offset</parametername>
</parameternamelist>
<parameterdescription>
<para>- offset counters </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t1_len</parametername>
</parameternamelist>
<parameterdescription>
<para>- size of t1_offset </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>final</parametername>
</parameternamelist>
<parameterdescription>
<para>- final block flag </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>- the result of the compression </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result_len</parametername>
</parameternamelist>
<parameterdescription>
<para>- size of result </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>-1 if there is an error otherwise 0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/crypto_ext.hpp" line="370" column="12" bodyfile="libraries/sysiolib/core/sysio/crypto_ext.hpp" bodystart="370" bodyend="373"/>
      </memberdef>
      <memberdef kind="function" id="group__crypto_ga3dd1f549de2c59114e866bf634400fb2_1ga3dd1f549de2c59114e866bf634400fb2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>sysio::checksum256</type>
        <definition>sysio::checksum256 sysio::sha3</definition>
        <argsstring>(const char *data, uint32_t length)</argsstring>
        <name>sha3</name>
        <param>
          <type>const char *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Hashes <computeroutput>data</computeroutput> using <computeroutput>sha3</computeroutput></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>- data you want to hash </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>- size of data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>keccak</parametername>
</parameternamelist>
<parameterdescription>
<para>- whether to use <computeroutput>keccak</computeroutput> or NIST variant; keccak = 1 and NIST == 0 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>sysio::checksum256 - Computed digest Hashes <computeroutput>data</computeroutput> using SHA3 NIST.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>- Data you want to hash </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>- Data length </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>sysio::checksum256 - Computed digest </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/crypto_ext.hpp" line="393" column="30" bodyfile="libraries/sysiolib/core/sysio/crypto_ext.hpp" bodystart="393" bodyend="395"/>
      </memberdef>
      <memberdef kind="function" id="group__crypto_ga09efcdc1530259fd014b37f6e169740b_1ga09efcdc1530259fd014b37f6e169740b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void sysio::assert_sha3</definition>
        <argsstring>(const char *data, uint32_t length, const sysio::checksum256 &amp;hash)</argsstring>
        <name>assert_sha3</name>
        <param>
          <type>const char *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type>const sysio::checksum256 &amp;</type>
          <declname>hash</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Tests if the SHA3 hash generated from data matches the provided digest.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>- Data you want to hash </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>- Data length </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hash</parametername>
</parameternamelist>
<parameterdescription>
<para>- digest to compare to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>!This method is not optimized away during replay </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/crypto_ext.hpp" line="406" column="16" bodyfile="libraries/sysiolib/core/sysio/crypto_ext.hpp" bodystart="406" bodyend="409"/>
      </memberdef>
      <memberdef kind="function" id="group__crypto_gaa1db7bb34896f194937134af2ffc129c_1gaa1db7bb34896f194937134af2ffc129c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>sysio::checksum256</type>
        <definition>sysio::checksum256 sysio::keccak</definition>
        <argsstring>(const char *data, uint32_t length)</argsstring>
        <name>keccak</name>
        <param>
          <type>const char *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Hashes <computeroutput>data</computeroutput> using SHA3 Keccak.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>- Data you want to hash </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>- Data length </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>sysio::checksum256 - Computed digest </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/crypto_ext.hpp" line="419" column="30" bodyfile="libraries/sysiolib/core/sysio/crypto_ext.hpp" bodystart="419" bodyend="421"/>
      </memberdef>
      <memberdef kind="function" id="group__crypto_gabd44ec82b1d153d2a7f1693861ea6eb3_1gabd44ec82b1d153d2a7f1693861ea6eb3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void sysio::assert_keccak</definition>
        <argsstring>(const char *data, uint32_t length, const sysio::checksum256 &amp;hash)</argsstring>
        <name>assert_keccak</name>
        <param>
          <type>const char *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type>const sysio::checksum256 &amp;</type>
          <declname>hash</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Tests if the SHA3 keccak hash generated from data matches the provided digest.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>- Data you want to hash </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>- Data length </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hash</parametername>
</parameternamelist>
<parameterdescription>
<para>- digest to compare to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>!This method is not optimized away during replay </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/crypto_ext.hpp" line="432" column="16" bodyfile="libraries/sysiolib/core/sysio/crypto_ext.hpp" bodystart="432" bodyend="435"/>
      </memberdef>
      <memberdef kind="function" id="group__crypto_ga593b42f3eb1e5e2368e78b3126063e67_1ga593b42f3eb1e5e2368e78b3126063e67" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t sysio::k1_recover</definition>
        <argsstring>(const char *sig, uint32_t sig_len, const char *dig, uint32_t dig_len, char *pub, uint32_t pub_len)</argsstring>
        <name>k1_recover</name>
        <param>
          <type>const char *</type>
          <declname>sig</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>sig_len</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>dig</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>dig_len</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>pub</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>pub_len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculates the uncompressed public key used for a given signature on a given digest.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sig</parametername>
</parameternamelist>
<parameterdescription>
<para>- signature. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sig_len</parametername>
</parameternamelist>
<parameterdescription>
<para>- size of signature </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dig</parametername>
</parameternamelist>
<parameterdescription>
<para>- digest of the message that was signed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dig_len</parametername>
</parameternamelist>
<parameterdescription>
<para>- size of digest </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pub</parametername>
</parameternamelist>
<parameterdescription>
<para>- public key result </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pub_len</parametername>
</parameternamelist>
<parameterdescription>
<para>- size of public key result</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>-1 if there was an error 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/crypto_ext.hpp" line="450" column="19" bodyfile="libraries/sysiolib/core/sysio/crypto_ext.hpp" bodystart="450" bodyend="452"/>
      </memberdef>
      <memberdef kind="function" id="namespacesysio_ab2d13186a98ab26591d6b874d08911e1_1ab2d13186a98ab26591d6b874d08911e1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Stream</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classsysio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
        <definition>datastream&lt;Stream&gt;&amp; sysio::operator&lt;&lt;</definition>
        <argsstring>(datastream&lt; Stream &gt; &amp;ds, const std::list&lt; T &gt; &amp;l)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classsysio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>const std::list&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Serialize an std::list into a stream</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to write </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>opt</parametername>
</parameternamelist>
<parameterdescription>
<para>- The value to serialize </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Stream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream buffer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>datastream&lt;Stream&gt;&amp; - Reference to the datastream </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/datastream.hpp" line="1" column="0" bodyfile="libraries/sysiolib/core/sysio/datastream.hpp" bodystart="290" bodyend="295"/>
      </memberdef>
      <memberdef kind="function" id="namespacesysio_a47a63ede5d2f044e051c62d23ade2cd3_1a47a63ede5d2f044e051c62d23ade2cd3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Stream</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classsysio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
        <definition>datastream&lt;Stream&gt;&amp; sysio::operator&gt;&gt;</definition>
        <argsstring>(datastream&lt; Stream &gt; &amp;ds, std::list&lt; T &gt; &amp;l)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type><ref refid="classsysio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>std::list&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Deserialize an std::list from a stream</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to read </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>opt</parametername>
</parameternamelist>
<parameterdescription>
<para>- The destination for deserialized value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Stream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream buffer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>datastream&lt;Stream&gt;&amp; - Reference to the datastream </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/datastream.hpp" line="306" column="19" bodyfile="libraries/sysiolib/core/sysio/datastream.hpp" bodystart="306" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="namespacesysio_acd325143077d2d47f6480fbd9b870a99_1acd325143077d2d47f6480fbd9b870a99" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Stream</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classsysio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
        <definition>datastream&lt;Stream&gt;&amp; sysio::operator&lt;&lt;</definition>
        <argsstring>(datastream&lt; Stream &gt; &amp;ds, const std::deque&lt; T &gt; &amp;d)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classsysio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>const std::deque&lt; T &gt; &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Serialize an std::deque into a stream</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to write </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>opt</parametername>
</parameternamelist>
<parameterdescription>
<para>- The value to serialize </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Stream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream buffer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>datastream&lt;Stream&gt;&amp; - Reference to the datastream </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/datastream.hpp" line="306" column="19" bodyfile="libraries/sysiolib/core/sysio/datastream.hpp" bodystart="324" bodyend="329"/>
      </memberdef>
      <memberdef kind="function" id="namespacesysio_ac694e57463377c8a4b4da209769a25b9_1ac694e57463377c8a4b4da209769a25b9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Stream</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classsysio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
        <definition>datastream&lt;Stream&gt;&amp; sysio::operator&gt;&gt;</definition>
        <argsstring>(datastream&lt; Stream &gt; &amp;ds, std::deque&lt; T &gt; &amp;d)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type><ref refid="classsysio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>std::deque&lt; T &gt; &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Deserialize an std::deque from a stream</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to read </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>opt</parametername>
</parameternamelist>
<parameterdescription>
<para>- The destination for deserialized value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Stream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream buffer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>datastream&lt;Stream&gt;&amp; - Reference to the datastream </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/datastream.hpp" line="340" column="19" bodyfile="libraries/sysiolib/core/sysio/datastream.hpp" bodystart="340" bodyend="347"/>
      </memberdef>
      <memberdef kind="function" id="namespacesysio_a49f800c6c8b32537545010da02887a32_1a49f800c6c8b32537545010da02887a32" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Stream</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classsysio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
        <definition>datastream&lt;Stream&gt;&amp; sysio::operator&lt;&lt;</definition>
        <argsstring>(datastream&lt; Stream &gt; &amp;ds, const std::variant&lt; Ts... &gt; &amp;var)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classsysio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>const std::variant&lt; Ts... &gt; &amp;</type>
          <declname>var</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Serialize an std::variant into a stream</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to write </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>opt</parametername>
</parameternamelist>
<parameterdescription>
<para>- The value to serialize </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Stream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream buffer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>datastream&lt;Stream&gt;&amp; - Reference to the datastream </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/datastream.hpp" line="340" column="19" bodyfile="libraries/sysiolib/core/sysio/datastream.hpp" bodystart="358" bodyend="363"/>
      </memberdef>
      <memberdef kind="function" id="namespacesysio_a77af3410f2edbb364996d0dbc520dba1_1a77af3410f2edbb364996d0dbc520dba1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
          <param>
            <type>typename Stream</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void sysio::deserialize</definition>
        <argsstring>(datastream&lt; Stream &gt; &amp;ds, std::variant&lt; Ts... &gt; &amp;var, int i)</argsstring>
        <name>deserialize</name>
        <param>
          <type><ref refid="classsysio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>std::variant&lt; Ts... &gt; &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/datastream.hpp" line="366" column="6" bodyfile="libraries/sysiolib/core/sysio/datastream.hpp" bodystart="366" bodyend="378"/>
      </memberdef>
      <memberdef kind="function" id="namespacesysio_a7818b44fb17221989488ea20ebf7e85c_1a7818b44fb17221989488ea20ebf7e85c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Stream</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classsysio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
        <definition>datastream&lt;Stream&gt;&amp; sysio::operator&gt;&gt;</definition>
        <argsstring>(datastream&lt; Stream &gt; &amp;ds, std::variant&lt; Ts... &gt; &amp;var)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type><ref refid="classsysio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>std::variant&lt; Ts... &gt; &amp;</type>
          <declname>var</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Deserialize an std::variant from a stream</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to read </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>opt</parametername>
</parameternamelist>
<parameterdescription>
<para>- The destination for deserialized value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Stream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream buffer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>datastream&lt;Stream&gt;&amp; - Reference to the datastream </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/datastream.hpp" line="389" column="19" bodyfile="libraries/sysiolib/core/sysio/datastream.hpp" bodystart="389" bodyend="394"/>
      </memberdef>
      <memberdef kind="function" id="namespacesysio_ab7a458b3052ba20c9d0c95a74a471377_1ab7a458b3052ba20c9d0c95a74a471377" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Stream</type>
          </param>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type><ref refid="classsysio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
        <definition>datastream&lt;Stream&gt;&amp; sysio::operator&lt;&lt;</definition>
        <argsstring>(datastream&lt; Stream &gt; &amp;ds, const std::pair&lt; T1, T2 &gt; &amp;t)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classsysio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>const std::pair&lt; T1, T2 &gt; &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Serialize an std::pair</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to write </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>- The value to serialize </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Stream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Args</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of the objects contained in the tuple </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>datastream&lt;Stream&gt;&amp; - Reference to the datastream </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/datastream.hpp" line="389" column="19" bodyfile="libraries/sysiolib/core/sysio/datastream.hpp" bodystart="406" bodyend="410"/>
      </memberdef>
      <memberdef kind="function" id="namespacesysio_a2acd82e7d1d061e86578233a041f7fd0_1a2acd82e7d1d061e86578233a041f7fd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Stream</type>
          </param>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type><ref refid="classsysio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
        <definition>datastream&lt;Stream&gt;&amp; sysio::operator&gt;&gt;</definition>
        <argsstring>(datastream&lt; Stream &gt; &amp;ds, std::pair&lt; T1, T2 &gt; &amp;t)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type><ref refid="classsysio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>std::pair&lt; T1, T2 &gt; &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Deserialize an std::pair</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to read </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>- The destination for deserialized value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Stream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Args</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of the objects contained in the tuple </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>datastream&lt;Stream&gt;&amp; - Reference to the datastream </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/datastream.hpp" line="422" column="12" bodyfile="libraries/sysiolib/core/sysio/datastream.hpp" bodystart="422" bodyend="429"/>
      </memberdef>
      <memberdef kind="function" id="namespacesysio_afcfa1e50b19cef048e8d2f12924e026b_1afcfa1e50b19cef048e8d2f12924e026b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Stream</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classsysio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
        <definition>datastream&lt;Stream&gt;&amp; sysio::operator&lt;&lt;</definition>
        <argsstring>(datastream&lt; Stream &gt; &amp;ds, const std::optional&lt; T &gt; &amp;opt)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classsysio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>const std::optional&lt; T &gt; &amp;</type>
          <declname>opt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Serialize an optional into a stream</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to write </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>opt</parametername>
</parameternamelist>
<parameterdescription>
<para>- The value to serialize </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Stream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream buffer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>datastream&lt;Stream&gt;&amp; - Reference to the datastream </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/datastream.hpp" line="422" column="12" bodyfile="libraries/sysiolib/core/sysio/datastream.hpp" bodystart="440" bodyend="446"/>
      </memberdef>
      <memberdef kind="function" id="namespacesysio_a3e2cdf59a674b999fc92df2b618e36cc_1a3e2cdf59a674b999fc92df2b618e36cc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Stream</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classsysio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
        <definition>datastream&lt;Stream&gt;&amp; sysio::operator&gt;&gt;</definition>
        <argsstring>(datastream&lt; Stream &gt; &amp;ds, std::optional&lt; T &gt; &amp;opt)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type><ref refid="classsysio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>std::optional&lt; T &gt; &amp;</type>
          <declname>opt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Deserialize an optional from a stream</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to read </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>opt</parametername>
</parameternamelist>
<parameterdescription>
<para>- The destination for deserialized value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Stream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream buffer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>datastream&lt;Stream&gt;&amp; - Reference to the datastream </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/datastream.hpp" line="457" column="19" bodyfile="libraries/sysiolib/core/sysio/datastream.hpp" bodystart="457" bodyend="466"/>
      </memberdef>
      <memberdef kind="function" id="namespacesysio_a5a377f12d26757ba0e5cc1797482c873_1a5a377f12d26757ba0e5cc1797482c873" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Stream</type>
          </param>
        </templateparamlist>
        <type><ref refid="classsysio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
        <definition>datastream&lt;Stream&gt;&amp; sysio::operator&lt;&lt;</definition>
        <argsstring>(datastream&lt; Stream &gt; &amp;ds, const bool &amp;d)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classsysio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>const bool &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Serialize a bool into a stream</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to read </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>- The value to serialize </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Stream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream buffer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>datastream&lt;Stream&gt;&amp; - Reference to the datastream </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/datastream.hpp" line="457" column="19" bodyfile="libraries/sysiolib/core/sysio/datastream.hpp" bodystart="478" bodyend="480"/>
      </memberdef>
      <memberdef kind="function" id="namespacesysio_a1034edeb969c086242637412827566c1_1a1034edeb969c086242637412827566c1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Stream</type>
          </param>
        </templateparamlist>
        <type><ref refid="classsysio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
        <definition>datastream&lt;Stream&gt;&amp; sysio::operator&gt;&gt;</definition>
        <argsstring>(datastream&lt; Stream &gt; &amp;ds, bool &amp;d)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type><ref refid="classsysio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>bool &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Deserialize a bool from a stream</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to read </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>- The destination for deserialized value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Stream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream buffer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>datastream&lt;Stream&gt;&amp; - Reference to the datastream </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/datastream.hpp" line="491" column="19" bodyfile="libraries/sysiolib/core/sysio/datastream.hpp" bodystart="491" bodyend="496"/>
      </memberdef>
      <memberdef kind="function" id="namespacesysio_a44a7b32bfd75ffa72c5c6b579da03b51_1a44a7b32bfd75ffa72c5c6b579da03b51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Stream</type>
          </param>
        </templateparamlist>
        <type><ref refid="classsysio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
        <definition>datastream&lt;Stream&gt;&amp; sysio::operator&lt;&lt;</definition>
        <argsstring>(datastream&lt; Stream &gt; &amp;ds, const std::string &amp;v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classsysio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Serialize a string into a stream</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to write </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>- The value to serialize </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Stream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream buffer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>datastream&lt;Stream&gt;&amp; - Reference to the datastream </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/datastream.hpp" line="491" column="19" bodyfile="libraries/sysiolib/core/sysio/datastream.hpp" bodystart="507" bodyend="512"/>
      </memberdef>
      <memberdef kind="function" id="namespacesysio_a4d34f8e9fffc932b99ed70050b2925fc_1a4d34f8e9fffc932b99ed70050b2925fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Stream</type>
          </param>
        </templateparamlist>
        <type><ref refid="classsysio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
        <definition>datastream&lt;Stream&gt;&amp; sysio::operator&gt;&gt;</definition>
        <argsstring>(datastream&lt; Stream &gt; &amp;ds, std::string &amp;v)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type><ref refid="classsysio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>std::string &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Deserialize a string from a stream</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to read </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>- The destination for deserialized value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Stream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream buffer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>datastream&lt;Stream&gt;&amp; - Reference to the datastream </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/datastream.hpp" line="523" column="12" bodyfile="libraries/sysiolib/core/sysio/datastream.hpp" bodystart="523" bodyend="531"/>
      </memberdef>
      <memberdef kind="function" id="namespacesysio_af3252a2bb13d07ba134f45d2feb45c19_1af3252a2bb13d07ba134f45d2feb45c19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Stream</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classsysio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
        <definition>datastream&lt;Stream&gt;&amp; sysio::operator&lt;&lt;</definition>
        <argsstring>(datastream&lt; Stream &gt; &amp;ds, const std::array&lt; T, N &gt; &amp;v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classsysio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>const std::array&lt; T, N &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Serialize a fixed size std::array</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to write </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>- The value to serialize </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Stream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of the object contained in the array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>N</parametername>
</parameternamelist>
<parameterdescription>
<para>- Size of the array </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>datastream&lt;Stream&gt;&amp; - Reference to the datastream </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/datastream.hpp" line="523" column="12" bodyfile="libraries/sysiolib/core/sysio/datastream.hpp" bodystart="544" bodyend="548"/>
      </memberdef>
      <memberdef kind="function" id="namespacesysio_add3fd4ef2c1e60148457e851fb37348a_1add3fd4ef2c1e60148457e851fb37348a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Stream</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classsysio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
        <definition>datastream&lt;Stream&gt;&amp; sysio::operator&gt;&gt;</definition>
        <argsstring>(datastream&lt; Stream &gt; &amp;ds, std::array&lt; T, N &gt; &amp;v)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type><ref refid="classsysio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>std::array&lt; T, N &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Deserialize a fixed size std::array</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to read </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>- The destination for deserialized value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Stream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of the object contained in the array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>N</parametername>
</parameternamelist>
<parameterdescription>
<para>- Size of the array </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>datastream&lt;Stream&gt;&amp; - Reference to the datastream </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/datastream.hpp" line="562" column="12" bodyfile="libraries/sysiolib/core/sysio/datastream.hpp" bodystart="562" bodyend="566"/>
      </memberdef>
      <memberdef kind="function" id="namespacesysio_a21eeae569df996e276e8dc16b11ff014_1a21eeae569df996e276e8dc16b11ff014" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Stream</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; _datastream_detail::is_pointer&lt; T &gt;()&gt; *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classsysio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
        <definition>datastream&lt;Stream&gt;&amp; sysio::operator&gt;&gt;</definition>
        <argsstring>(datastream&lt; Stream &gt; &amp;ds, T)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type><ref refid="classsysio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>T</type>
        </param>
        <briefdescription>
<para>Pointer should not be serialized, so this function will always throws an error. </para>
        </briefdescription>
        <detaileddescription>
<para>Deserialize a pointer</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to read </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Stream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of the pointer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>datastream&lt;Stream&gt;&amp; - Reference to the datastream </para>
</simplesect>
<simplesect kind="post"><para>Throw an exception if it is a pointer </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/datastream.hpp" line="618" column="12" bodyfile="libraries/sysiolib/core/sysio/datastream.hpp" bodystart="618" bodyend="621"/>
      </memberdef>
      <memberdef kind="function" id="namespacesysio_a3fe36180bbb4bf97799cd7f6da0b628d_1a3fe36180bbb4bf97799cd7f6da0b628d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Stream</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
          <param>
            <type>std::enable_if_t&lt;!_datastream_detail::is_primitive&lt; T &gt;() &amp;&amp;!_datastream_detail::is_pointer&lt; T &gt;()&gt; *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classsysio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
        <definition>datastream&lt; Stream &gt; &amp; sysio::operator&lt;&lt;</definition>
        <argsstring>(datastream&lt; Stream &gt; &amp;ds, const T(&amp;v)[N])</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classsysio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>const T(&amp;)</type>
          <declname>v</declname>
          <array>[N]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Serialize a fixed size C array of non-primitive and non-pointer type</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to write </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>- The value to serialize </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Stream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of the pointer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>datastream&lt;Stream&gt;&amp; - Reference to the datastream</para>
</simplesect>
Serialize a fixed size C array of primitive type</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to write </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>- The value to serialize </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Stream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of the pointer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>datastream&lt;Stream&gt;&amp; - Reference to the datastream </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/datastream.hpp" line="618" column="12" bodyfile="libraries/sysiolib/core/sysio/datastream.hpp" bodystart="635" bodyend="640"/>
      </memberdef>
      <memberdef kind="function" id="namespacesysio_a79132cb5f6b0af6ed32dc9319d29bc63_1a79132cb5f6b0af6ed32dc9319d29bc63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Stream</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
          <param>
            <type>std::enable_if_t&lt;!_datastream_detail::is_primitive&lt; T &gt;() &amp;&amp;!_datastream_detail::is_pointer&lt; T &gt;()&gt; *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classsysio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
        <definition>datastream&lt; Stream &gt; &amp; sysio::operator&gt;&gt;</definition>
        <argsstring>(datastream&lt; Stream &gt; &amp;ds, T(&amp;v)[N])</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type><ref refid="classsysio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>T(&amp;)</type>
          <declname>v</declname>
          <array>[N]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Deserialize a fixed size C array of non-primitive and non-pointer type</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to read </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>- The destination for deserialized value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of the object contained in the array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>N</parametername>
</parameternamelist>
<parameterdescription>
<para>- Size of the array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Stream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream buffer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>datastream&lt;Stream&gt;&amp; - Reference to the datastream</para>
</simplesect>
Deserialize a fixed size C array of primitive type</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to read </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>- The destination for deserialized value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of the object contained in the array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>N</parametername>
</parameternamelist>
<parameterdescription>
<para>- Size of the array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Stream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream buffer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>datastream&lt;Stream&gt;&amp; - Reference to the datastream </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/datastream.hpp" line="672" column="12" bodyfile="libraries/sysiolib/core/sysio/datastream.hpp" bodystart="672" bodyend="679"/>
      </memberdef>
      <memberdef kind="function" id="namespacesysio_a8b8995e336e3a3fb440ec030e260453a_1a8b8995e336e3a3fb440ec030e260453a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Stream</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; _datastream_detail::is_primitive&lt; T &gt;()&gt; *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classsysio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
        <definition>datastream&lt; Stream &gt; &amp; sysio::operator&lt;&lt;</definition>
        <argsstring>(datastream&lt; Stream &gt; &amp;ds, const std::vector&lt; T &gt; &amp;v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classsysio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Serialize a vector of T, where T is a primitive data type</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to write </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>- The value to serialize </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Stream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream buffer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>datastream&lt;Stream&gt;&amp; - Reference to the datastream</para>
</simplesect>
Serialize a vector</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to write </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>- The value to serialize </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Stream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of the object contained in the vector </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>datastream&lt;Stream&gt;&amp; - Reference to the datastream </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/datastream.hpp" line="693" column="12" bodyfile="libraries/sysiolib/core/sysio/datastream.hpp" bodystart="711" bodyend="715"/>
      </memberdef>
      <memberdef kind="function" id="namespacesysio_a589d97ad1db07d65ca1c2be09542159f_1a589d97ad1db07d65ca1c2be09542159f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Stream</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; _datastream_detail::is_primitive&lt; T &gt;()&gt; *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classsysio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
        <definition>datastream&lt; Stream &gt; &amp; sysio::operator&gt;&gt;</definition>
        <argsstring>(datastream&lt; Stream &gt; &amp;ds, std::vector&lt; T &gt; &amp;v)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type><ref refid="classsysio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>std::vector&lt; T &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Deserialize a vector of T, where T is a primitive data type</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to read </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>- The destination for deserialized value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Stream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream buffer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>datastream&lt;Stream&gt;&amp; - Reference to the datastream</para>
</simplesect>
Deserialize a vector</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to read </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>- The destination for deserialized value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Stream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of the object contained in the vector </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>datastream&lt;Stream&gt;&amp; - Reference to the datastream </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/datastream.hpp" line="745" column="12" bodyfile="libraries/sysiolib/core/sysio/datastream.hpp" bodystart="745" bodyend="751"/>
      </memberdef>
      <memberdef kind="function" id="namespacesysio_a4cbf02b10a84f2a9e6fbfa4102dfffd6_1a4cbf02b10a84f2a9e6fbfa4102dfffd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Stream</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classsysio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
        <definition>datastream&lt;Stream&gt;&amp; sysio::operator&lt;&lt;</definition>
        <argsstring>(datastream&lt; Stream &gt; &amp;ds, const std::set&lt; T &gt; &amp;s)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classsysio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>const std::set&lt; T &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Serialize a set</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to write </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>- The value to serialize </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Stream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of the object contained in the set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>datastream&lt;Stream&gt;&amp; - Reference to the datastream </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/datastream.hpp" line="764" column="12" bodyfile="libraries/sysiolib/core/sysio/datastream.hpp" bodystart="783" bodyend="789"/>
      </memberdef>
      <memberdef kind="function" id="namespacesysio_a1002d7da6d1a0b95414d3191cf806596_1a1002d7da6d1a0b95414d3191cf806596" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Stream</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classsysio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
        <definition>datastream&lt;Stream&gt;&amp; sysio::operator&gt;&gt;</definition>
        <argsstring>(datastream&lt; Stream &gt; &amp;ds, std::set&lt; T &gt; &amp;s)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type><ref refid="classsysio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>std::set&lt; T &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Deserialize a set</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to read </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>- The destination for deserialized value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Stream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of the object contained in the set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>datastream&lt;Stream&gt;&amp; - Reference to the datastream </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/datastream.hpp" line="802" column="12" bodyfile="libraries/sysiolib/core/sysio/datastream.hpp" bodystart="802" bodyend="812"/>
      </memberdef>
      <memberdef kind="function" id="namespacesysio_ace8863ffa32a40cc7752484de45cfbe6_1ace8863ffa32a40cc7752484de45cfbe6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Stream</type>
          </param>
          <param>
            <type>typename K</type>
          </param>
          <param>
            <type>typename V</type>
          </param>
        </templateparamlist>
        <type><ref refid="classsysio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
        <definition>datastream&lt;Stream&gt;&amp; sysio::operator&lt;&lt;</definition>
        <argsstring>(datastream&lt; Stream &gt; &amp;ds, const std::map&lt; K, V &gt; &amp;m)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classsysio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>const std::map&lt; K, V &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Serialize a map</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to write </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>- The value to serialize </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Stream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>K</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of the key contained in the map </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>V</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of the value contained in the map </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>datastream&lt;Stream&gt;&amp; - Reference to the datastream </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/datastream.hpp" line="802" column="12" bodyfile="libraries/sysiolib/core/sysio/datastream.hpp" bodystart="825" bodyend="831"/>
      </memberdef>
      <memberdef kind="function" id="namespacesysio_ac4579ea445a104b31f93ada0d7949b8a_1ac4579ea445a104b31f93ada0d7949b8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Stream</type>
          </param>
          <param>
            <type>typename K</type>
          </param>
          <param>
            <type>typename V</type>
          </param>
        </templateparamlist>
        <type><ref refid="classsysio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
        <definition>datastream&lt;Stream&gt;&amp; sysio::operator&gt;&gt;</definition>
        <argsstring>(datastream&lt; Stream &gt; &amp;ds, std::map&lt; K, V &gt; &amp;m)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type><ref refid="classsysio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>std::map&lt; K, V &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Deserialize a map</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to read </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>- The destination for deserialized value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Stream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>K</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of the key contained in the map </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>V</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of the value contained in the map </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>datastream&lt;Stream&gt;&amp; - Reference to the datastream </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/datastream.hpp" line="844" column="12" bodyfile="libraries/sysiolib/core/sysio/datastream.hpp" bodystart="844" bodyend="854"/>
      </memberdef>
      <memberdef kind="function" id="namespacesysio_a1a908a3dfed36bb7375ac31f72c6aa8e_1a1a908a3dfed36bb7375ac31f72c6aa8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Stream</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classsysio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
        <definition>datastream&lt;Stream&gt;&amp; sysio::operator&lt;&lt;</definition>
        <argsstring>(datastream&lt; Stream &gt; &amp;ds, const std::tuple&lt; Args... &gt; &amp;t)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classsysio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>const std::tuple&lt; Args... &gt; &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Serialize a tuple</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to write </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>- The value to serialize </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Stream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Args</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of the objects contained in the tuple </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>datastream&lt;Stream&gt;&amp; - Reference to the datastream </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/datastream.hpp" line="844" column="12" bodyfile="libraries/sysiolib/core/sysio/datastream.hpp" bodystart="866" bodyend="871"/>
      </memberdef>
      <memberdef kind="function" id="namespacesysio_aeb044ab1092699bbb7ffc1bbeb0b6864_1aeb044ab1092699bbb7ffc1bbeb0b6864" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Stream</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classsysio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
        <definition>datastream&lt;Stream&gt;&amp; sysio::operator&gt;&gt;</definition>
        <argsstring>(datastream&lt; Stream &gt; &amp;ds, std::tuple&lt; Args... &gt; &amp;t)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type><ref refid="classsysio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>std::tuple&lt; Args... &gt; &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Deserialize a tuple</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to read </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>- The destination for deserialized value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Stream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Args</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of the objects contained in the tuple </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>datastream&lt;Stream&gt;&amp; - Reference to the datastream </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/datastream.hpp" line="883" column="12" bodyfile="libraries/sysiolib/core/sysio/datastream.hpp" bodystart="883" bodyend="888"/>
      </memberdef>
      <memberdef kind="function" id="namespacesysio_a5b24516911227deded6a7fd5c33ffa69_1a5b24516911227deded6a7fd5c33ffa69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DataStream</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; std::is_class&lt; T &gt;::value &amp;&amp;_datastream_detail::is_datastream&lt; DataStream &gt;::value &gt; *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>DataStream &amp;</type>
        <definition>DataStream&amp; sysio::operator&lt;&lt;</definition>
        <argsstring>(DataStream &amp;ds, const T &amp;v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>DataStream &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Serialize a class</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to write </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>- The value to serialize </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DataStream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of class </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DataStream&amp; - Reference to the datastream </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/datastream.hpp" line="900" column="1" bodyfile="libraries/sysiolib/core/sysio/datastream.hpp" bodystart="900" bodyend="905"/>
      </memberdef>
      <memberdef kind="function" id="namespacesysio_a47351e28d32d0cdb0453e0e4b2c538de_1a47351e28d32d0cdb0453e0e4b2c538de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DataStream</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; std::is_class&lt; T &gt;::value &amp;&amp;_datastream_detail::is_datastream&lt; DataStream &gt;::value &gt; *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>DataStream &amp;</type>
        <definition>DataStream&amp; sysio::operator&gt;&gt;</definition>
        <argsstring>(DataStream &amp;ds, T &amp;v)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>DataStream &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Deserialize a class</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to read </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>- The destination for deserialized value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DataStream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of class </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DataStream&amp; - Reference to the datastream </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/datastream.hpp" line="917" column="12" bodyfile="libraries/sysiolib/core/sysio/datastream.hpp" bodystart="917" bodyend="922"/>
      </memberdef>
      <memberdef kind="function" id="namespacesysio_ad69cf786cbb637d517db381cb7c7fd27_1ad69cf786cbb637d517db381cb7c7fd27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Stream</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; _datastream_detail::is_primitive&lt; T &gt;()&gt; *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classsysio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
        <definition>datastream&lt;Stream&gt;&amp; sysio::operator&lt;&lt;</definition>
        <argsstring>(datastream&lt; Stream &gt; &amp;ds, const T &amp;v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classsysio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Serialize a primitive type</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to write </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>- The value to serialize </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Stream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of the primitive type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>datastream&lt;Stream&gt;&amp; - Reference to the datastream </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/datastream.hpp" line="917" column="12" bodyfile="libraries/sysiolib/core/sysio/datastream.hpp" bodystart="934" bodyend="937"/>
      </memberdef>
      <memberdef kind="function" id="namespacesysio_a9aa8bce60f3176c42f5105f43fddb46f_1a9aa8bce60f3176c42f5105f43fddb46f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Stream</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; _datastream_detail::is_primitive&lt; T &gt;()&gt; *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classsysio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
        <definition>datastream&lt;Stream&gt;&amp; sysio::operator&gt;&gt;</definition>
        <argsstring>(datastream&lt; Stream &gt; &amp;ds, T &amp;v)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type><ref refid="classsysio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Deserialize a primitive type</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to read </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>- The destination for deserialized value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Stream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of the primitive type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>datastream&lt;Stream&gt;&amp; - Reference to the datastream </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/datastream.hpp" line="949" column="12" bodyfile="libraries/sysiolib/core/sysio/datastream.hpp" bodystart="949" bodyend="952"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_ga82e7868634ca1502d8f06ad3b6b2886e_1ga82e7868634ca1502d8f06ad3b6b2886e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T sysio::unpack</definition>
        <argsstring>(const char *buffer, size_t len)</argsstring>
        <name>unpack</name>
        <param>
          <type>const char *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unpack data inside a fixed size buffer as T</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of the unpacked data </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>- Pointer to the buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>- Length of the buffer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>T - The unpacked data </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/datastream.hpp" line="964" column="3" bodyfile="libraries/sysiolib/core/sysio/datastream.hpp" bodystart="964" bodyend="969"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_ga5c1f95002dd82b289fa6aa5e5f1e5334_1ga5c1f95002dd82b289fa6aa5e5f1e5334" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void sysio::unpack</definition>
        <argsstring>(T &amp;res, const char *buffer, size_t len)</argsstring>
        <name>unpack</name>
        <param>
          <type>T &amp;</type>
          <declname>res</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unpack data inside a fixed size buffer as T</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of the unpacked data </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>- Variable to fill with the unpacking </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>- Pointer to the buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>- Length of the buffer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>T - The unpacked data </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/datastream.hpp" line="982" column="6" bodyfile="libraries/sysiolib/core/sysio/datastream.hpp" bodystart="982" bodyend="985"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_ga76cbd7a75869d8cb39aeedb676ba03f0_1ga76cbd7a75869d8cb39aeedb676ba03f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T sysio::unpack</definition>
        <argsstring>(const std::vector&lt; char &gt; &amp;bytes)</argsstring>
        <name>unpack</name>
        <param>
          <type>const std::vector&lt; char &gt; &amp;</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unpack data inside a variable size buffer as T</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of the unpacked data </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>- Buffer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>T - The unpacked data </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/datastream.hpp" line="996" column="3" bodyfile="libraries/sysiolib/core/sysio/datastream.hpp" bodystart="996" bodyend="998"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_gabadd9ed5d5c1796250afe70557289fcc_1gabadd9ed5d5c1796250afe70557289fcc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>size_t</type>
        <definition>size_t sysio::pack_size</definition>
        <argsstring>(const T &amp;value)</argsstring>
        <name>pack_size</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the size of the packed data</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of the data to be packed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>- Data to be packed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>size_t - Size of the packed data </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/datastream.hpp" line="1009" column="8" bodyfile="libraries/sysiolib/core/sysio/datastream.hpp" bodystart="1009" bodyend="1013"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_ga89649f8180db3911ea61a12981b5b142_1ga89649f8180db3911ea61a12981b5b142" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; char &gt;</type>
        <definition>std::vector&lt;char&gt; sysio::pack</definition>
        <argsstring>(const T &amp;value)</argsstring>
        <name>pack</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get packed data</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of the data to be packed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>- Data to be packed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bytes - The packed data </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/datastream.hpp" line="1024" column="13" bodyfile="libraries/sysiolib/core/sysio/datastream.hpp" bodystart="1024" bodyend="1031"/>
      </memberdef>
      <memberdef kind="function" id="namespacesysio_a298156785d004aeb8849a720f72481d3_1a298156785d004aeb8849a720f72481d3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DataStream</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>DataStream &amp;</type>
        <definition>DataStream&amp; sysio::operator&lt;&lt;</definition>
        <argsstring>(DataStream &amp;ds, const ::sysio::ignore_wrapper&lt; T &gt; &amp;val)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>DataStream &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>const ::<ref refid="structsysio_1_1ignore__wrapper" kindref="compound">sysio::ignore_wrapper</ref>&lt; T &gt; &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Serialize ignored_wrapper&lt;T&gt;&apos;s T value. </para>
        </briefdescription>
        <detaileddescription>
<para>Serialize an ignored_wrapper type into a stream</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to write </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>- The value to serialize </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DataStream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream buffer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DataStream&amp; - Reference to the datastream </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/ignore.hpp" line="46" column="11" bodyfile="libraries/sysiolib/core/sysio/ignore.hpp" bodystart="46" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="namespacesysio_a788b338502915718cee0f003bd5659f4_1a788b338502915718cee0f003bd5659f4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DataStream</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>DataStream &amp;</type>
        <definition>DataStream&amp; sysio::operator&lt;&lt;</definition>
        <argsstring>(DataStream &amp;ds, const ::sysio::ignore&lt; T &gt; &amp;val)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>DataStream &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>const ::<ref refid="structsysio_1_1ignore" kindref="compound">sysio::ignore</ref>&lt; T &gt; &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Serialize an ignored type. </para>
        </briefdescription>
        <detaileddescription>
<para>Serialize an ignored type into a stream</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to write </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ignore</parametername>
</parameternamelist>
<parameterdescription>
<para>- The value to serialize </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DataStream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream buffer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DataStream&amp; - Reference to the datastream </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/ignore.hpp" line="61" column="11" bodyfile="libraries/sysiolib/core/sysio/ignore.hpp" bodystart="61" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="namespacesysio_a374b5f140062fe0e962988d7ff2ccf32_1a374b5f140062fe0e962988d7ff2ccf32" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DataStream</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>DataStream &amp;</type>
        <definition>DataStream&amp; sysio::operator&gt;&gt;</definition>
        <argsstring>(DataStream &amp;ds, ::sysio::ignore&lt; T &gt; &amp;)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>DataStream &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>::<ref refid="structsysio_1_1ignore" kindref="compound">sysio::ignore</ref>&lt; T &gt; &amp;</type>
        </param>
        <briefdescription>
<para>Deserialize an ignored type. </para>
        </briefdescription>
        <detaileddescription>
<para>Deserialize an ignored type from a stream</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to read </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ignored</parametername>
</parameternamelist>
<parameterdescription>
<para>- The destination for deserialized value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DataStream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream buffer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DataStream&amp; - Reference to the datastream </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/ignore.hpp" line="75" column="22" bodyfile="libraries/sysiolib/core/sysio/ignore.hpp" bodystart="75" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="namespacesysio_a0d350ceac7c84da150a0791bbbb389c1_1a0d350ceac7c84da150a0791bbbb389c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename S</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void sysio::to_key</definition>
        <argsstring>(const T &amp;obj, datastream&lt; S &gt; &amp;stream)</argsstring>
        <name>to_key</name>
        <param>
          <type>const T &amp;</type>
          <declname>obj</declname>
        </param>
        <param>
          <type><ref refid="classsysio_1_1datastream" kindref="compound">datastream</ref>&lt; S &gt; &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/key_utils.hpp" line="302" column="6" bodyfile="libraries/sysiolib/core/sysio/key_utils.hpp" bodystart="302" bodyend="324" declfile="libraries/sysiolib/core/sysio/key_utils.hpp" declline="98" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacesysio_a59ae10af43c83235cb4142f34221836d_1a59ae10af43c83235cb4142f34221836d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename S</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void sysio::to_key_tuple</definition>
        <argsstring>(const T &amp;obj, datastream&lt; S &gt; &amp;stream)</argsstring>
        <name>to_key_tuple</name>
        <param>
          <type>const T &amp;</type>
          <declname>obj</declname>
        </param>
        <param>
          <type><ref refid="classsysio_1_1datastream" kindref="compound">datastream</ref>&lt; S &gt; &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/key_utils.hpp" line="101" column="6" bodyfile="libraries/sysiolib/core/sysio/key_utils.hpp" bodystart="101" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="namespacesysio_acb69a97ed787a0f90c0f25962244e145_1acb69a97ed787a0f90c0f25962244e145" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
          <param>
            <type>typename S</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void sysio::to_key</definition>
        <argsstring>(const std::tuple&lt; Ts... &gt; &amp;obj, datastream&lt; S &gt; &amp;stream)</argsstring>
        <name>to_key</name>
        <param>
          <type>const std::tuple&lt; Ts... &gt; &amp;</type>
          <declname>obj</declname>
        </param>
        <param>
          <type><ref refid="classsysio_1_1datastream" kindref="compound">datastream</ref>&lt; S &gt; &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/key_utils.hpp" line="109" column="6" bodyfile="libraries/sysiolib/core/sysio/key_utils.hpp" bodystart="109" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="namespacesysio_a3d9c89450c38bc7ab5d84d2e855452fe_1a3d9c89450c38bc7ab5d84d2e855452fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
          <param>
            <type>typename S</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void sysio::to_key</definition>
        <argsstring>(const std::array&lt; T, N &gt; &amp;obj, datastream&lt; S &gt; &amp;stream)</argsstring>
        <name>to_key</name>
        <param>
          <type>const std::array&lt; T, N &gt; &amp;</type>
          <declname>obj</declname>
        </param>
        <param>
          <type><ref refid="classsysio_1_1datastream" kindref="compound">datastream</ref>&lt; S &gt; &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/key_utils.hpp" line="114" column="6" bodyfile="libraries/sysiolib/core/sysio/key_utils.hpp" bodystart="114" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="namespacesysio_a674ef4c0efe62ff5742204324a35354d_1a674ef4c0efe62ff5742204324a35354d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename S</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void sysio::to_key_optional</definition>
        <argsstring>(const bool *obj, datastream&lt; S &gt; &amp;stream)</argsstring>
        <name>to_key_optional</name>
        <param>
          <type>const bool *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type><ref refid="classsysio_1_1datastream" kindref="compound">datastream</ref>&lt; S &gt; &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/key_utils.hpp" line="119" column="6" bodyfile="libraries/sysiolib/core/sysio/key_utils.hpp" bodystart="119" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="namespacesysio_a2dbb92e1bbf6ad7756ec0fc22deb1856_1a2dbb92e1bbf6ad7756ec0fc22deb1856" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename S</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void sysio::to_key_optional</definition>
        <argsstring>(const T *obj, datastream&lt; S &gt; &amp;stream)</argsstring>
        <name>to_key_optional</name>
        <param>
          <type>const T *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type><ref refid="classsysio_1_1datastream" kindref="compound">datastream</ref>&lt; S &gt; &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/key_utils.hpp" line="130" column="6" bodyfile="libraries/sysiolib/core/sysio/key_utils.hpp" bodystart="130" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="namespacesysio_a2cd20d0d0bf192d374957258e8df5365_1a2cd20d0d0bf192d374957258e8df5365" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>typename S</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void sysio::to_key</definition>
        <argsstring>(const std::pair&lt; T, U &gt; &amp;obj, datastream&lt; S &gt; &amp;stream)</argsstring>
        <name>to_key</name>
        <param>
          <type>const std::pair&lt; T, U &gt; &amp;</type>
          <declname>obj</declname>
        </param>
        <param>
          <type><ref refid="classsysio_1_1datastream" kindref="compound">datastream</ref>&lt; S &gt; &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/key_utils.hpp" line="153" column="6" bodyfile="libraries/sysiolib/core/sysio/key_utils.hpp" bodystart="153" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="namespacesysio_ae7eee0227aafae2da2b31bd4eb149825_1ae7eee0227aafae2da2b31bd4eb149825" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename S</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void sysio::to_key_range</definition>
        <argsstring>(const T &amp;obj, datastream&lt; S &gt; &amp;stream)</argsstring>
        <name>to_key_range</name>
        <param>
          <type>const T &amp;</type>
          <declname>obj</declname>
        </param>
        <param>
          <type><ref refid="classsysio_1_1datastream" kindref="compound">datastream</ref>&lt; S &gt; &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/key_utils.hpp" line="159" column="6" bodyfile="libraries/sysiolib/core/sysio/key_utils.hpp" bodystart="159" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="namespacesysio_a57f869df3103e209b4d6f3249ae43957_1a57f869df3103e209b4d6f3249ae43957" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename S</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto sysio::to_key</definition>
        <argsstring>(const T &amp;obj, datastream&lt; S &gt; &amp;stream) -&gt; std::enable_if_t&lt; is_ranged_type(std::declval&lt; T &gt;()), void &gt;</argsstring>
        <name>to_key</name>
        <param>
          <type>const T &amp;</type>
          <declname>obj</declname>
        </param>
        <param>
          <type><ref refid="classsysio_1_1datastream" kindref="compound">datastream</ref>&lt; S &gt; &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/key_utils.hpp" line="165" column="6" bodyfile="libraries/sysiolib/core/sysio/key_utils.hpp" bodystart="165" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="namespacesysio_a40083fbba55329eb68d24598dd6cb876_1a40083fbba55329eb68d24598dd6cb876" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>typename S</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void sysio::to_key</definition>
        <argsstring>(const std::map&lt; T, U &gt; &amp;obj, datastream&lt; S &gt; &amp;stream)</argsstring>
        <name>to_key</name>
        <param>
          <type>const std::map&lt; T, U &gt; &amp;</type>
          <declname>obj</declname>
        </param>
        <param>
          <type><ref refid="classsysio_1_1datastream" kindref="compound">datastream</ref>&lt; S &gt; &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/key_utils.hpp" line="170" column="6" bodyfile="libraries/sysiolib/core/sysio/key_utils.hpp" bodystart="170" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="namespacesysio_a07250d932f460fbfe65fc72773b7df63_1a07250d932f460fbfe65fc72773b7df63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename S</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void sysio::to_key</definition>
        <argsstring>(const std::optional&lt; T &gt; &amp;obj, datastream&lt; S &gt; &amp;stream)</argsstring>
        <name>to_key</name>
        <param>
          <type>const std::optional&lt; T &gt; &amp;</type>
          <declname>obj</declname>
        </param>
        <param>
          <type><ref refid="classsysio_1_1datastream" kindref="compound">datastream</ref>&lt; S &gt; &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/key_utils.hpp" line="175" column="6" bodyfile="libraries/sysiolib/core/sysio/key_utils.hpp" bodystart="175" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="namespacesysio_ab6eb73a26f8ab106b72ea830bd9a662f_1ab6eb73a26f8ab106b72ea830bd9a662f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename S</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void sysio::to_key_varuint32</definition>
        <argsstring>(std::uint32_t obj, datastream&lt; S &gt; &amp;stream)</argsstring>
        <name>to_key_varuint32</name>
        <param>
          <type>std::uint32_t</type>
          <declname>obj</declname>
        </param>
        <param>
          <type><ref refid="classsysio_1_1datastream" kindref="compound">datastream</ref>&lt; S &gt; &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/key_utils.hpp" line="189" column="6" bodyfile="libraries/sysiolib/core/sysio/key_utils.hpp" bodystart="189" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="namespacesysio_ae5b2566232351aae50ed642ae0f43363_1ae5b2566232351aae50ed642ae0f43363" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename S</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void sysio::to_key_varint32</definition>
        <argsstring>(std::int32_t obj, datastream&lt; S &gt; &amp;stream)</argsstring>
        <name>to_key_varint32</name>
        <param>
          <type>std::int32_t</type>
          <declname>obj</declname>
        </param>
        <param>
          <type><ref refid="classsysio_1_1datastream" kindref="compound">datastream</ref>&lt; S &gt; &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/key_utils.hpp" line="226" column="6" bodyfile="libraries/sysiolib/core/sysio/key_utils.hpp" bodystart="226" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="namespacesysio_a3591649adf9b4257de1683f3a9c67ca5_1a3591649adf9b4257de1683f3a9c67ca5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
          <param>
            <type>typename S</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void sysio::to_key</definition>
        <argsstring>(const std::variant&lt; Ts... &gt; &amp;obj, datastream&lt; S &gt; &amp;stream)</argsstring>
        <name>to_key</name>
        <param>
          <type>const std::variant&lt; Ts... &gt; &amp;</type>
          <declname>obj</declname>
        </param>
        <param>
          <type><ref refid="classsysio_1_1datastream" kindref="compound">datastream</ref>&lt; S &gt; &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/key_utils.hpp" line="256" column="6" bodyfile="libraries/sysiolib/core/sysio/key_utils.hpp" bodystart="256" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="namespacesysio_ac5cd358c42ec168d218ea9279c503436_1ac5cd358c42ec168d218ea9279c503436" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
          <param>
            <type>typename S</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void sysio::to_key</definition>
        <argsstring>(const char(&amp;str)[N], datastream&lt; S &gt; &amp;stream)</argsstring>
        <name>to_key</name>
        <param>
          <type>const char(&amp;)</type>
          <declname>str</declname>
          <array>[N]</array>
        </param>
        <param>
          <type><ref refid="classsysio_1_1datastream" kindref="compound">datastream</ref>&lt; S &gt; &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/key_utils.hpp" line="262" column="6" bodyfile="libraries/sysiolib/core/sysio/key_utils.hpp" bodystart="262" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="namespacesysio_ae3280dda4e08a021118069952ef7cbfc_1ae3280dda4e08a021118069952ef7cbfc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename S</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void sysio::to_key</definition>
        <argsstring>(std::string_view obj, datastream&lt; S &gt; &amp;stream)</argsstring>
        <name>to_key</name>
        <param>
          <type>std::string_view</type>
          <declname>obj</declname>
        </param>
        <param>
          <type><ref refid="classsysio_1_1datastream" kindref="compound">datastream</ref>&lt; S &gt; &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/key_utils.hpp" line="267" column="6" bodyfile="libraries/sysiolib/core/sysio/key_utils.hpp" bodystart="267" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="namespacesysio_a3be1433384866bb4fcbaa50c382b69bb_1a3be1433384866bb4fcbaa50c382b69bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename S</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void sysio::to_key</definition>
        <argsstring>(const std::string &amp;obj, datastream&lt; S &gt; &amp;stream)</argsstring>
        <name>to_key</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>obj</declname>
        </param>
        <param>
          <type><ref refid="classsysio_1_1datastream" kindref="compound">datastream</ref>&lt; S &gt; &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/key_utils.hpp" line="278" column="6" bodyfile="libraries/sysiolib/core/sysio/key_utils.hpp" bodystart="278" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="namespacesysio_a2610576db2004b7868a3efcd6721f0de_1a2610576db2004b7868a3efcd6721f0de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename S</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void sysio::to_key</definition>
        <argsstring>(bool obj, datastream&lt; S &gt; &amp;stream)</argsstring>
        <name>to_key</name>
        <param>
          <type>bool</type>
          <declname>obj</declname>
        </param>
        <param>
          <type><ref refid="classsysio_1_1datastream" kindref="compound">datastream</ref>&lt; S &gt; &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/key_utils.hpp" line="283" column="6" bodyfile="libraries/sysiolib/core/sysio/key_utils.hpp" bodystart="283" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="namespacesysio_a14aa4b12efd1fe7c638038bfcb973e9e_1a14aa4b12efd1fe7c638038bfcb973e9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename UInt</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>UInt</type>
        <definition>UInt sysio::float_to_key</definition>
        <argsstring>(T value)</argsstring>
        <name>float_to_key</name>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/key_utils.hpp" line="288" column="6" bodyfile="libraries/sysiolib/core/sysio/key_utils.hpp" bodystart="288" bodyend="299"/>
      </memberdef>
      <memberdef kind="function" id="namespacesysio_a60cfadf922247ab8f0589014cffda162_1a60cfadf922247ab8f0589014cffda162" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void sysio::convert_to_key</definition>
        <argsstring>(const T &amp;t, key_type &amp;bin)</argsstring>
        <name>convert_to_key</name>
        <param>
          <type>const T &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type><ref refid="namespacesysio_af2c4c03e101057e612a1f10082a0da14_1af2c4c03e101057e612a1f10082a0da14" kindref="member">key_type</ref> &amp;</type>
          <declname>bin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/key_utils.hpp" line="327" column="6" bodyfile="libraries/sysiolib/core/sysio/key_utils.hpp" bodystart="327" bodyend="335"/>
      </memberdef>
      <memberdef kind="function" id="namespacesysio_a0f7a1d528d16261d53d9343227996cef_1a0f7a1d528d16261d53d9343227996cef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacesysio_af2c4c03e101057e612a1f10082a0da14_1af2c4c03e101057e612a1f10082a0da14" kindref="member">key_type</ref></type>
        <definition>key_type sysio::convert_to_key</definition>
        <argsstring>(const T &amp;t)</argsstring>
        <name>convert_to_key</name>
        <param>
          <type>const T &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/key_utils.hpp" line="338" column="10" bodyfile="libraries/sysiolib/core/sysio/key_utils.hpp" bodystart="338" bodyend="342"/>
      </memberdef>
      <memberdef kind="function" id="namespacesysio_a0b1813ad047a6b0f37970f76f5a01ece_1a0b1813ad047a6b0f37970f76f5a01ece" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>uint8_t</type>
            <declname>Base</declname>
            <defname>Base</defname>
          </param>
          <param>
            <type>typename T</type>
            <defval>uint64_t</defval>
          </param>
        </templateparamlist>
        <type>constexpr T</type>
        <definition>constexpr T sysio::pow</definition>
        <argsstring>(uint8_t exponent)</argsstring>
        <name>pow</name>
        <param>
          <type>uint8_t</type>
          <declname>exponent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Base^exponent </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/powers.hpp" line="81" column="16" bodyfile="libraries/sysiolib/core/sysio/powers.hpp" bodystart="81" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="group__console_gabd88fded96c1630a019aac052b4e7459_1gabd88fded96c1630a019aac052b4e7459" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void sysio::printhex</definition>
        <argsstring>(const void *ptr, uint32_t size)</argsstring>
        <name>printhex</name>
        <param>
          <type>const void *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Prints a block of bytes in hexadecimal</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>- pointer to bytes of interest </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>- number of bytes to print </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/print.hpp" line="77" column="16" bodyfile="libraries/sysiolib/core/sysio/print.hpp" bodystart="77" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="group__console_ga5d4d10b7489ff7cdc7a7f23f247d59e2_1ga5d4d10b7489ff7cdc7a7f23f247d59e2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void sysio::printl</definition>
        <argsstring>(const char *ptr, size_t len)</argsstring>
        <name>printl</name>
        <param>
          <type>const char *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Prints string to a given length</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>- a string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>- number of chars to print </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/print.hpp" line="88" column="16" bodyfile="libraries/sysiolib/core/sysio/print.hpp" bodystart="88" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="group__console_gac994825ff7d74c284b5f0ff008208353_1gac994825ff7d74c284b5f0ff008208353" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void sysio::print</definition>
        <argsstring>(const char *ptr)</argsstring>
        <name>print</name>
        <param>
          <type>const char *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Prints string</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>- a null terminated string </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/print.hpp" line="98" column="16" bodyfile="libraries/sysiolib/core/sysio/print.hpp" bodystart="98" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="namespacesysio_a78c09cbcd2bb82812233e31be71f5955_1a78c09cbcd2bb82812233e31be71f5955" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; std::is_integral&lt; std::decay_t&lt; T &gt;&gt;::value &amp;&amp;std::is_signed&lt; std::decay_t&lt; T &gt;&gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void sysio::print</definition>
        <argsstring>(T num)</argsstring>
        <name>print</name>
        <param>
          <type>T</type>
          <declname>num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Prints 8-128 bit signed integer</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>to be printed</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Prints 8-128 bit unsigned integer</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>to be printed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/print.hpp" line="109" column="16" bodyfile="libraries/sysiolib/core/sysio/print.hpp" bodystart="109" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="group__console_ga0126e8ec4434410b7bc09e64b7f6a90b_1ga0126e8ec4434410b7bc09e64b7f6a90b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void sysio::print</definition>
        <argsstring>(float num)</argsstring>
        <name>print</name>
        <param>
          <type>float</type>
          <declname>num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Prints single-precision floating point number (i.e. float)</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>to be printed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/print.hpp" line="140" column="16" bodyfile="libraries/sysiolib/core/sysio/print.hpp" bodystart="140" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="group__console_ga5bb7861d851fe74f1e17a0ab6ebfa0a4_1ga5bb7861d851fe74f1e17a0ab6ebfa0a4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void sysio::print</definition>
        <argsstring>(double num)</argsstring>
        <name>print</name>
        <param>
          <type>double</type>
          <declname>num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Prints double-precision floating point number (i.e. double)</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>to be printed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/print.hpp" line="148" column="16" bodyfile="libraries/sysiolib/core/sysio/print.hpp" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="group__console_gac0ffe8e9b66c8bebd5b4c88b5cf061b0_1gac0ffe8e9b66c8bebd5b4c88b5cf061b0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void sysio::print</definition>
        <argsstring>(long double num)</argsstring>
        <name>print</name>
        <param>
          <type>long double</type>
          <declname>num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Prints quadruple-precision floating point number (i.e. long double)</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>to be printed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/print.hpp" line="156" column="16" bodyfile="libraries/sysiolib/core/sysio/print.hpp" bodystart="156" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="group__console_gaf493049d7f561c79a1a0ba9d04cdcac8_1gaf493049d7f561c79a1a0ba9d04cdcac8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>std::enable_if_t&lt;!std::is_integral&lt; std::decay_t&lt; T &gt;&gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void sysio::print</definition>
        <argsstring>(T &amp;&amp;t)</argsstring>
        <name>print</name>
        <param>
          <type>T &amp;&amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Prints class object</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>to be printed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para>T must implements <ref refid="group__console_gac994825ff7d74c284b5f0ff008208353_1gac994825ff7d74c284b5f0ff008208353" kindref="member">print()</ref> function </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/print.hpp" line="166" column="16" bodyfile="libraries/sysiolib/core/sysio/print.hpp" bodystart="166" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="group__console_gad43a54fc19452b6b16350f44d55f5639_1gad43a54fc19452b6b16350f44d55f5639" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void sysio::print_f</definition>
        <argsstring>(const char *s)</argsstring>
        <name>print_f</name>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Prints null terminated string</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>null terminated string to be printed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/print.hpp" line="181" column="16" bodyfile="libraries/sysiolib/core/sysio/print.hpp" bodystart="181" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="namespacesysio_a58faacc43d7715366d8ac37ab96397c3_1a58faacc43d7715366d8ac37ab96397c3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Arg</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void sysio::print_f</definition>
        <argsstring>(const char *s, Arg val, Args... rest)</argsstring>
        <name>print_f</name>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>Arg</type>
          <declname>val</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>rest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Prints formatted string. It behaves similar to C printf/</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Arg</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of the value used to replace the format specifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Args</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of the value used to replace the format specifier </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>- Null terminated string with to be printed (it can contains format specifier) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>- The value used to replace the format specifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rest</parametername>
</parameternamelist>
<parameterdescription>
<para>- The values used to replace the format specifier</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Example: <programlisting><codeline><highlight class="normal">print_f(&quot;Number<sp/>of<sp/>apples:<sp/>%&quot;,<sp/>10);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/print.hpp" line="200" column="16" bodyfile="libraries/sysiolib/core/sysio/print.hpp" bodystart="200" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="namespacesysio_a580e41bb12b2612e14f797406c5d53f0_1a580e41bb12b2612e14f797406c5d53f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Arg</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void sysio::print</definition>
        <argsstring>(Arg &amp;&amp;a, Args &amp;&amp;... args)</argsstring>
        <name>print</name>
        <param>
          <type>Arg &amp;&amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Print out value / list of values</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Arg</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of the value used to replace the format specifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Args</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of the value used to replace the format specifier </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>- The value to be printed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>- The other values to be printed</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Example:</para>
<para><programlisting><codeline><highlight class="normal">const<sp/>char<sp/>*s<sp/>=<sp/>&quot;Hello<sp/>World!&quot;;</highlight></codeline>
<codeline><highlight class="normal">uint64_t<sp/>unsigned_64_bit_int<sp/>=<sp/>1e+18;</highlight></codeline>
<codeline><highlight class="normal">uint128_t<sp/>unsigned_128_bit_int<sp/>(87654323456);</highlight></codeline>
<codeline><highlight class="normal">uint64_t<sp/>string_as_unsigned_64_bit<sp/>=<sp/>&quot;abcde&quot;_n;</highlight></codeline>
<codeline><highlight class="normal">print(s<sp/>,<sp/>unsigned_64_bit_int,<sp/>unsigned_128_bit_int,<sp/>string_as_unsigned_64_bit);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Ouput:<sp/>Hello<sp/>World!100000000000000000087654323456abcde</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/print.hpp" line="232" column="9" bodyfile="libraries/sysiolib/core/sysio/print.hpp" bodystart="232" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="namespacesysio_ab3f99e9282f78c6356b4c838338474ac_1ab3f99e9282f78c6356b4c838338474ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type></type>
        <definition>sysio::overloaded</definition>
        <argsstring>(Ts...) -&gt; overloaded&lt; Ts... &gt;</argsstring>
        <name>overloaded</name>
        <param>
          <type>Ts...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/rope.hpp" line="12" column="15" declfile="libraries/sysiolib/core/sysio/rope.hpp" declline="12" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespacesysio_a95f65eb573c66f772e429d9278853300_1a95f65eb573c66f772e429d9278853300" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool sysio::operator&lt;</definition>
        <argsstring>(const string &amp;lhs, const string &amp;rhs)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classsysio_1_1string" kindref="compound">string</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classsysio_1_1string" kindref="compound">string</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/string.hpp" line="427" column="11" bodyfile="libraries/sysiolib/core/sysio/string.hpp" bodystart="427" bodyend="439"/>
      </memberdef>
      <memberdef kind="function" id="namespacesysio_a3af967f88ab1efc24e5a94dc5631121b_1a3af967f88ab1efc24e5a94dc5631121b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool sysio::operator&gt;</definition>
        <argsstring>(const string &amp;lhs, const string &amp;rhs)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classsysio_1_1string" kindref="compound">string</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classsysio_1_1string" kindref="compound">string</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/string.hpp" line="441" column="16" bodyfile="libraries/sysiolib/core/sysio/string.hpp" bodystart="441" bodyend="443"/>
      </memberdef>
      <memberdef kind="function" id="namespacesysio_adccae949a1a8ee215de88cf5bb16c7e6_1adccae949a1a8ee215de88cf5bb16c7e6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool sysio::operator&lt;=</definition>
        <argsstring>(const string &amp;lhs, const string &amp;rhs)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="classsysio_1_1string" kindref="compound">string</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classsysio_1_1string" kindref="compound">string</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/string.hpp" line="445" column="11" bodyfile="libraries/sysiolib/core/sysio/string.hpp" bodystart="445" bodyend="447"/>
      </memberdef>
      <memberdef kind="function" id="namespacesysio_a36486023d7c6f0834c2f6c2816ebd8b3_1a36486023d7c6f0834c2f6c2816ebd8b3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool sysio::operator&gt;=</definition>
        <argsstring>(const string &amp;lhs, const string &amp;rhs)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="classsysio_1_1string" kindref="compound">string</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classsysio_1_1string" kindref="compound">string</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/string.hpp" line="449" column="16" bodyfile="libraries/sysiolib/core/sysio/string.hpp" bodystart="449" bodyend="451"/>
      </memberdef>
      <memberdef kind="function" id="namespacesysio_ad7db4c8c617f8a7b6d09ac6f91e963c7_1ad7db4c8c617f8a7b6d09ac6f91e963c7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool sysio::operator==</definition>
        <argsstring>(const string &amp;lhs, const string &amp;rhs)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classsysio_1_1string" kindref="compound">string</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classsysio_1_1string" kindref="compound">string</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/string.hpp" line="453" column="16" bodyfile="libraries/sysiolib/core/sysio/string.hpp" bodystart="453" bodyend="455"/>
      </memberdef>
      <memberdef kind="function" id="namespacesysio_a315c8f4742ecc3a66f4f6c155c6c5376_1a315c8f4742ecc3a66f4f6c155c6c5376" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool sysio::operator!=</definition>
        <argsstring>(const string &amp;lhs, const string &amp;rhs)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classsysio_1_1string" kindref="compound">string</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classsysio_1_1string" kindref="compound">string</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/string.hpp" line="457" column="16" bodyfile="libraries/sysiolib/core/sysio/string.hpp" bodystart="457" bodyend="459"/>
      </memberdef>
      <memberdef kind="function" id="namespacesysio_a98014d711afa0e6f971d98e1b1db0dc2_1a98014d711afa0e6f971d98e1b1db0dc2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classsysio_1_1string" kindref="compound">string</ref></type>
        <definition>string sysio::operator+</definition>
        <argsstring>(const string &amp;lhs, const string &amp;rhs)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classsysio_1_1string" kindref="compound">string</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classsysio_1_1string" kindref="compound">string</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/string.hpp" line="461" column="18" bodyfile="libraries/sysiolib/core/sysio/string.hpp" bodystart="461" bodyend="465"/>
      </memberdef>
      <memberdef kind="function" id="namespacesysio_acd4c24b45bd647fef9637d5e6abf3e50_1acd4c24b45bd647fef9637d5e6abf3e50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DataStream</type>
          </param>
        </templateparamlist>
        <type>DataStream &amp;</type>
        <definition>DataStream&amp; sysio::operator&lt;&lt;</definition>
        <argsstring>(DataStream &amp;ds, const string &amp;str)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>DataStream &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>const <ref refid="classsysio_1_1string" kindref="compound">string</ref> &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/string.hpp" line="468" column="4" bodyfile="libraries/sysiolib/core/sysio/string.hpp" bodystart="468" bodyend="473"/>
      </memberdef>
      <memberdef kind="function" id="namespacesysio_a58f448d7ad94027c94792859df7337ba_1a58f448d7ad94027c94792859df7337ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DataStream</type>
          </param>
        </templateparamlist>
        <type>DataStream &amp;</type>
        <definition>DataStream&amp; sysio::operator&gt;&gt;</definition>
        <argsstring>(DataStream &amp;ds, string &amp;str)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>DataStream &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type><ref refid="classsysio_1_1string" kindref="compound">string</ref> &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/string.hpp" line="476" column="15" bodyfile="libraries/sysiolib/core/sysio/string.hpp" bodystart="476" bodyend="481"/>
      </memberdef>
      <memberdef kind="function" id="namespacesysio_ab5fee882e97183e8f822be4be5c415c8_1ab5fee882e97183e8f822be4be5c415c8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DataStream</type>
          </param>
        </templateparamlist>
        <type>DataStream &amp;</type>
        <definition>DataStream&amp; sysio::operator&lt;&lt;</definition>
        <argsstring>(DataStream &amp;ds, const sysio::symbol_code sym_code)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>DataStream &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>const <ref refid="classsysio_1_1symbol__code" kindref="compound">sysio::symbol_code</ref></type>
          <declname>sym_code</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Serialize a <ref refid="classsysio_1_1symbol__code" kindref="compound">symbol_code</ref> into a stream</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to write </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sym</parametername>
</parameternamelist>
<parameterdescription>
<para>- The value to serialize </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DataStream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream buffer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DataStream&amp; - Reference to the datastream </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/symbol.hpp" line="216" column="11" bodyfile="libraries/sysiolib/core/sysio/symbol.hpp" bodystart="216" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="namespacesysio_a0448d1ad1fde7c7b2b1612a33afdc823_1a0448d1ad1fde7c7b2b1612a33afdc823" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DataStream</type>
          </param>
        </templateparamlist>
        <type>DataStream &amp;</type>
        <definition>DataStream&amp; sysio::operator&gt;&gt;</definition>
        <argsstring>(DataStream &amp;ds, sysio::symbol_code &amp;sym_code)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>DataStream &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type><ref refid="classsysio_1_1symbol__code" kindref="compound">sysio::symbol_code</ref> &amp;</type>
          <declname>sym_code</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Deserialize a <ref refid="classsysio_1_1symbol__code" kindref="compound">symbol_code</ref> from a stream</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to read </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>symbol</parametername>
</parameternamelist>
<parameterdescription>
<para>- The destination for deserialized value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DataStream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream buffer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DataStream&amp; - Reference to the datastream </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/symbol.hpp" line="231" column="22" bodyfile="libraries/sysiolib/core/sysio/symbol.hpp" bodystart="231" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="namespacesysio_ae6679c832f9c43228728101fb2aec23a_1ae6679c832f9c43228728101fb2aec23a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DataStream</type>
          </param>
        </templateparamlist>
        <type>DataStream &amp;</type>
        <definition>DataStream&amp; sysio::operator&lt;&lt;</definition>
        <argsstring>(DataStream &amp;ds, const sysio::symbol sym)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>DataStream &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>const <ref refid="classsysio_1_1symbol" kindref="compound">sysio::symbol</ref></type>
          <declname>sym</declname>
        </param>
        <briefdescription>
<para>Serialize a symbol. </para>
        </briefdescription>
        <detaileddescription>
<para>Serialize a symbol into a stream</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to write </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sym</parametername>
</parameternamelist>
<parameterdescription>
<para>- The value to serialize </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DataStream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream buffer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DataStream&amp; - Reference to the datastream </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/symbol.hpp" line="353" column="11" bodyfile="libraries/sysiolib/core/sysio/symbol.hpp" bodystart="353" bodyend="357"/>
      </memberdef>
      <memberdef kind="function" id="namespacesysio_ad37eb3847eb30fa1b6c93d1a6fdf3f32_1ad37eb3847eb30fa1b6c93d1a6fdf3f32" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DataStream</type>
          </param>
        </templateparamlist>
        <type>DataStream &amp;</type>
        <definition>DataStream&amp; sysio::operator&gt;&gt;</definition>
        <argsstring>(DataStream &amp;ds, sysio::symbol &amp;sym)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>DataStream &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type><ref refid="classsysio_1_1symbol" kindref="compound">sysio::symbol</ref> &amp;</type>
          <declname>sym</declname>
        </param>
        <briefdescription>
<para>Deserialize a symbol. </para>
        </briefdescription>
        <detaileddescription>
<para>Deserialize a symbol from a stream</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to read </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>symbol</parametername>
</parameternamelist>
<parameterdescription>
<para>- The destination for deserialized value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DataStream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream buffer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DataStream&amp; - Reference to the datastream </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/symbol.hpp" line="369" column="22" bodyfile="libraries/sysiolib/core/sysio/symbol.hpp" bodystart="369" bodyend="374"/>
      </memberdef>
      <memberdef kind="function" id="namespacesysio_a0ee3547e61a6da8c7ecc8fd1afdde60f_1a0ee3547e61a6da8c7ecc8fd1afdde60f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classsysio_1_1microseconds" kindref="compound">microseconds</ref></type>
        <definition>microseconds sysio::seconds</definition>
        <argsstring>(int64_t s)</argsstring>
        <name>seconds</name>
        <param>
          <type>int64_t</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/time.hpp" line="47" column="23" bodyfile="libraries/sysiolib/core/sysio/time.hpp" bodystart="47" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="namespacesysio_a59f2e92e11e38b58c77e74c8670dced2_1a59f2e92e11e38b58c77e74c8670dced2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classsysio_1_1microseconds" kindref="compound">microseconds</ref></type>
        <definition>microseconds sysio::milliseconds</definition>
        <argsstring>(int64_t s)</argsstring>
        <name>milliseconds</name>
        <param>
          <type>int64_t</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/time.hpp" line="48" column="23" bodyfile="libraries/sysiolib/core/sysio/time.hpp" bodystart="48" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="namespacesysio_a4fcd89249199a92c20b9198c7abc90e2_1a4fcd89249199a92c20b9198c7abc90e2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classsysio_1_1microseconds" kindref="compound">microseconds</ref></type>
        <definition>microseconds sysio::minutes</definition>
        <argsstring>(int64_t m)</argsstring>
        <name>minutes</name>
        <param>
          <type>int64_t</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/time.hpp" line="49" column="23" bodyfile="libraries/sysiolib/core/sysio/time.hpp" bodystart="49" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="namespacesysio_a13181e2a8f87732297b08e70d8abedab_1a13181e2a8f87732297b08e70d8abedab" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classsysio_1_1microseconds" kindref="compound">microseconds</ref></type>
        <definition>microseconds sysio::hours</definition>
        <argsstring>(int64_t h)</argsstring>
        <name>hours</name>
        <param>
          <type>int64_t</type>
          <declname>h</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/time.hpp" line="50" column="23" bodyfile="libraries/sysiolib/core/sysio/time.hpp" bodystart="50" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="namespacesysio_aabfdeadf0e3aa4bc7c6b88ae70a3c56c_1aabfdeadf0e3aa4bc7c6b88ae70a3c56c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classsysio_1_1microseconds" kindref="compound">microseconds</ref></type>
        <definition>microseconds sysio::days</definition>
        <argsstring>(int64_t d)</argsstring>
        <name>days</name>
        <param>
          <type>int64_t</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/core/sysio/time.hpp" line="51" column="23" bodyfile="libraries/sysiolib/core/sysio/time.hpp" bodystart="51" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="group__action_ga6d5d5474d576019c6ea5194f4803d54b_1ga6d5d5474d576019c6ea5194f4803d54b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T sysio::unpack_action_data</definition>
        <argsstring>()</argsstring>
        <name>unpack_action_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Unpacked action data casted as T.</para>
</simplesect>
Example:</para>
<para><programlisting><codeline><highlight class="normal">struct<sp/>dummy_action<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>char<sp/>a;<sp/>//1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>unsigned<sp/>long<sp/>long<sp/>b;<sp/>//8</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/><sp/>c;<sp/>//4</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>SYSLIB_SERIALIZE(<sp/>dummy_action,<sp/>(a)(b)(c)<sp/>)</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">dummy_action<sp/>msg<sp/>=<sp/>unpack_action_data&lt;dummy_action&gt;();</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/contracts/sysio/action.hpp" line="83" column="6" bodyfile="libraries/sysiolib/contracts/sysio/action.hpp" bodystart="83" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="group__action_ga4050e0dcdf9d9b51bddb2d93fc9fa42f_1ga4050e0dcdf9d9b51bddb2d93fc9fa42f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void sysio::require_recipient</definition>
        <argsstring>(name notify_account)</argsstring>
        <name>require_recipient</name>
        <param>
          <type><ref refid="structsysio_1_1name" kindref="compound">name</ref></type>
          <declname>notify_account</declname>
        </param>
        <briefdescription>
<para>Add the specified account to set of accounts to be notified. </para>
        </briefdescription>
        <detaileddescription>
<para>Add the specified account to set of accounts to be notified</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>notify_account</parametername>
</parameternamelist>
<parameterdescription>
<para>- name of the account to be verified </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/contracts/sysio/action.hpp" line="98" column="16" bodyfile="libraries/sysiolib/contracts/sysio/action.hpp" bodystart="98" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="group__action_ga7143369c772e9e75acfea1cc2cff56e3_1ga7143369c772e9e75acfea1cc2cff56e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>accounts</declname>
            <defname>accounts</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void sysio::require_recipient</definition>
        <argsstring>(name notify_account, accounts... remaining_accounts)</argsstring>
        <name>require_recipient</name>
        <param>
          <type><ref refid="structsysio_1_1name" kindref="compound">name</ref></type>
          <declname>notify_account</declname>
        </param>
        <param>
          <type>accounts...</type>
          <declname>remaining_accounts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>All of the listed accounts will be added to the set of accounts to be notified</para>
<para>This helper method enables you to add multiple accounts to accounts to be notified list with a single call rather than having to call the similar C API multiple times.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>notify_account</parametername>
</parameternamelist>
<parameterdescription>
<para>account to be notified </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>remaining_accounts</parametername>
</parameternamelist>
<parameterdescription>
<para>accounts to be notified </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>action.code is also considered as part of the set of notified accounts</para>
</simplesect>
Example:</para>
<para><programlisting><codeline><highlight class="normal">require_recipient(&quot;Account1&quot;_n,<sp/>&quot;Account2&quot;_n,<sp/>&quot;Account3&quot;_n);<sp/>//<sp/>throws<sp/>exception<sp/>if<sp/>any<sp/>of<sp/>them<sp/>not<sp/>in<sp/>set.</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/contracts/sysio/action.hpp" line="120" column="9" bodyfile="libraries/sysiolib/contracts/sysio/action.hpp" bodystart="120" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="group__action_ga4fb6d5ddbc9dde4f1e19b942d317c740_1ga4fb6d5ddbc9dde4f1e19b942d317c740" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void sysio::require_auth</definition>
        <argsstring>(name n)</argsstring>
        <name>require_auth</name>
        <param>
          <type><ref refid="structsysio_1_1name" kindref="compound">name</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Verifies that <ref refid="group__name" kindref="compound">Name</ref> exists in the set of provided auths on a action. Fails if not found.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>- name of the account to be verified </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/contracts/sysio/action.hpp" line="131" column="16" bodyfile="libraries/sysiolib/contracts/sysio/action.hpp" bodystart="131" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="group__action_ga72357c5b27ba8bbf8b086cd852962bb6_1ga72357c5b27ba8bbf8b086cd852962bb6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classsysio_1_1time__point" kindref="compound">time_point</ref></type>
        <definition>time_point sysio::publication_time</definition>
        <argsstring>()</argsstring>
        <name>publication_time</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the time in microseconds from 1970 of the publication_time</para>
<para><simplesect kind="return"><para>the time in microseconds from 1970 of the publication_time </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/contracts/sysio/action.hpp" line="141" column="23" bodyfile="libraries/sysiolib/contracts/sysio/action.hpp" bodystart="141" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="namespacesysio_a91f4b7477c361af1b1ce832bb08167b5_1a91f4b7477c361af1b1ce832bb08167b5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structsysio_1_1name" kindref="compound">name</ref></type>
        <definition>name sysio::current_receiver</definition>
        <argsstring>()</argsstring>
        <name>current_receiver</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the current receiver of the action <simplesect kind="return"><para>the account which specifies the current receiver of the action </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/contracts/sysio/action.hpp" line="149" column="16" bodyfile="libraries/sysiolib/contracts/sysio/action.hpp" bodystart="149" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="group__action_ga7c345dedb82104f0ea5215e2bfc27d4e_1ga7c345dedb82104f0ea5215e2bfc27d4e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t sysio::read_action_data</definition>
        <argsstring>(void *msg, uint32_t len)</argsstring>
        <name>read_action_data</name>
        <param>
          <type>void *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy up to length bytes of current action data to the specified location</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>- a pointer where up to length bytes of the current action data will be copied </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>- len of the current action data to be copied, 0 to report required size </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the number of bytes copied to msg, or number of bytes that can be copied if len==0 passed </para>
</simplesect>
<simplesect kind="pre"><para><computeroutput>msg</computeroutput> is a valid pointer to a range of memory at least <computeroutput>len</computeroutput> bytes long </para>
</simplesect>
<simplesect kind="post"><para><computeroutput>msg</computeroutput> is filled with packed action data </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/contracts/sysio/action.hpp" line="163" column="20" bodyfile="libraries/sysiolib/contracts/sysio/action.hpp" bodystart="163" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="namespacesysio_a326cd3a87b249c33a0d76bd0c4f93af0_1a326cd3a87b249c33a0d76bd0c4f93af0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t sysio::action_data_size</definition>
        <argsstring>()</argsstring>
        <name>action_data_size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the length of the current action&apos;s data field. This method is useful for dynamically sized actions</para>
<para><simplesect kind="return"><para>the length of the current action&apos;s data field </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/contracts/sysio/action.hpp" line="172" column="20" bodyfile="libraries/sysiolib/contracts/sysio/action.hpp" bodystart="172" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="group__action_gafabaee9b377c9055d162998a603e2548_1gafabaee9b377c9055d162998a603e2548" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void sysio::require_auth</definition>
        <argsstring>(const permission_level &amp;level)</argsstring>
        <name>require_auth</name>
        <param>
          <type>const <ref refid="structsysio_1_1permission__level" kindref="compound">permission_level</ref> &amp;</type>
          <declname>level</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Require the specified authorization for this action. If this action doesn&apos;t contain the specified auth, it will fail.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>- Authorization to be required </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/contracts/sysio/action.hpp" line="237" column="16" bodyfile="libraries/sysiolib/contracts/sysio/action.hpp" bodystart="237" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="group__action_ga5c3822fa784936636c24f53c81dd3b5e_1ga5c3822fa784936636c24f53c81dd3b5e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool sysio::has_auth</definition>
        <argsstring>(name n)</argsstring>
        <name>has_auth</name>
        <param>
          <type><ref refid="structsysio_1_1name" kindref="compound">name</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Verifies that n has auth.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>- name of the account to be verified </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/contracts/sysio/action.hpp" line="247" column="16" bodyfile="libraries/sysiolib/contracts/sysio/action.hpp" bodystart="247" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="group__action_gad99bd091df73a8312651e22c2b55ecca_1gad99bd091df73a8312651e22c2b55ecca" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool sysio::is_account</definition>
        <argsstring>(name n)</argsstring>
        <name>is_account</name>
        <param>
          <type><ref refid="structsysio_1_1name" kindref="compound">name</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Verifies that n is an existing account.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>- name of the account to check </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/contracts/sysio/action.hpp" line="257" column="16" bodyfile="libraries/sysiolib/contracts/sysio/action.hpp" bodystart="257" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="namespacesysio_a45545a7dc03fde61ef7355559bad5068_1a45545a7dc03fde61ef7355559bad5068" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void sysio::dispatch_inline</definition>
        <argsstring>(name code, name act, std::vector&lt; permission_level &gt; perms, std::tuple&lt; Args... &gt; args)</argsstring>
        <name>dispatch_inline</name>
        <param>
          <type><ref refid="structsysio_1_1name" kindref="compound">name</ref></type>
          <declname>code</declname>
        </param>
        <param>
          <type><ref refid="structsysio_1_1name" kindref="compound">name</ref></type>
          <declname>act</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="structsysio_1_1permission__level" kindref="compound">permission_level</ref> &gt;</type>
          <declname>perms</declname>
        </param>
        <param>
          <type>std::tuple&lt; Args... &gt;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/contracts/sysio/action.hpp" line="545" column="9" bodyfile="libraries/sysiolib/contracts/sysio/action.hpp" bodystart="545" bodyend="549"/>
      </memberdef>
      <memberdef kind="function" id="group__dispatcher_ga6fc508cd535786170ae5c758fe95f8f5_1ga6fc508cd535786170ae5c758fe95f8f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Contract</type>
          </param>
          <param>
            <type>typename FirstAction</type>
          </param>
          <param>
            <type>typename SecondAction</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Actions</declname>
            <defname>Actions</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool sysio::dispatch</definition>
        <argsstring>(uint64_t code, uint64_t act)</argsstring>
        <name>dispatch</name>
        <param>
          <type>uint64_t</type>
          <declname>code</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>act</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method will dynamically dispatch an incoming set of actions to</para>
<para><programlisting><codeline><highlight class="normal">static<sp/>Contract::on(<sp/>ActionType<sp/>)</highlight></codeline>
</programlisting></para>
<para>For this to work the Actions must be derived from <ref refid="classsysio_1_1contract" kindref="compound">sysio::contract</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/contracts/sysio/dispatcher.hpp" line="44" column="9" bodyfile="libraries/sysiolib/contracts/sysio/dispatcher.hpp" bodystart="44" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="group__dispatcher_gab3c58ff85e3081360360e9aafbad227a_1gab3c58ff85e3081360360e9aafbad227a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool sysio::execute_action</definition>
        <argsstring>(name self, name code, void(T::*func)(Args...))</argsstring>
        <name>execute_action</name>
        <param>
          <type><ref refid="structsysio_1_1name" kindref="compound">name</ref></type>
          <declname>self</declname>
        </param>
        <param>
          <type><ref refid="structsysio_1_1name" kindref="compound">name</ref></type>
          <declname>code</declname>
        </param>
        <param>
          <type>void(T::*)(Args...)</type>
          <declname>func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unpack the received action and execute the correponding action handler</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>- The contract class that has the correponding action handler, this contract should be derived from <ref refid="classsysio_1_1contract" kindref="compound">sysio::contract</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Q</parametername>
</parameternamelist>
<parameterdescription>
<para>- The namespace of the action handler function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Args</parametername>
</parameternamelist>
<parameterdescription>
<para>- The arguments that the action handler accepts, i.e. members of the action </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>- The contract object that has the correponding action handler </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para>- The action handler </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/contracts/sysio/dispatcher.hpp" line="67" column="9" bodyfile="libraries/sysiolib/contracts/sysio/dispatcher.hpp" bodystart="67" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="group__permission_gae407a710bb92d67a77658c9d7bbdda4e_1gae407a710bb92d67a77658c9d7bbdda4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool sysio::check_transaction_authorization</definition>
        <argsstring>(const char *trx_data, uint32_t trx_size, const char *pubkeys_data, uint32_t pubkeys_size, const char *perms_data, uint32_t perms_size)</argsstring>
        <name>check_transaction_authorization</name>
        <param>
          <type>const char *</type>
          <declname>trx_data</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>trx_size</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>pubkeys_data</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>pubkeys_size</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>perms_data</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>perms_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Checks if a transaction is authorized by a provided set of keys and permissions</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>trx_data</parametername>
</parameternamelist>
<parameterdescription>
<para>- pointer to the start of the serialized transaction </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>trx_size</parametername>
</parameternamelist>
<parameterdescription>
<para>- size (in bytes) of the serialized transaction </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pubkeys_data</parametername>
</parameternamelist>
<parameterdescription>
<para>- pointer to the start of the serialized vector of provided public keys </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pubkeys_size</parametername>
</parameternamelist>
<parameterdescription>
<para>- size (in bytes) of serialized vector of provided public keys (can be 0 if no public keys are to be provided) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>perms_data</parametername>
</parameternamelist>
<parameterdescription>
<para>- pointer to the start of the serialized vector of provided permissions (empty permission name acts as wildcard) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>perms_size</parametername>
</parameternamelist>
<parameterdescription>
<para>- size (in bytes) of the serialized vector of provided permissions</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the transaction is authorized, 0 otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/contracts/sysio/permission.hpp" line="49" column="4" bodyfile="libraries/sysiolib/contracts/sysio/permission.hpp" bodystart="49" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="group__permission_ga86012e5584f3365c59543db903f12565_1ga86012e5584f3365c59543db903f12565" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool sysio::check_permission_authorization</definition>
        <argsstring>(name account, name permission, const char *pubkeys_data, uint32_t pubkeys_size, const char *perms_data, uint32_t perms_size, microseconds delay)</argsstring>
        <name>check_permission_authorization</name>
        <param>
          <type><ref refid="structsysio_1_1name" kindref="compound">name</ref></type>
          <declname>account</declname>
        </param>
        <param>
          <type><ref refid="structsysio_1_1name" kindref="compound">name</ref></type>
          <declname>permission</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>pubkeys_data</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>pubkeys_size</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>perms_data</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>perms_size</declname>
        </param>
        <param>
          <type><ref refid="classsysio_1_1microseconds" kindref="compound">microseconds</ref></type>
          <declname>delay</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Checks if a permission is authorized by a provided delay and a provided set of keys and permissions</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>account</parametername>
</parameternamelist>
<parameterdescription>
<para>- the account owner of the permission </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>permission</parametername>
</parameternamelist>
<parameterdescription>
<para>- the name of the permission to check for authorization </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pubkeys_data</parametername>
</parameternamelist>
<parameterdescription>
<para>- pointer to the start of the serialized vector of provided public keys </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pubkeys_size</parametername>
</parameternamelist>
<parameterdescription>
<para>- size (in bytes) of serialized vector of provided public keys (can be 0 if no public keys are to be provided) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>perms_data</parametername>
</parameternamelist>
<parameterdescription>
<para>- pointer to the start of the serialized vector of provided permissions (empty permission name acts as wildcard) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>perms_size</parametername>
</parameternamelist>
<parameterdescription>
<para>- size (in bytes) of the serialized vector of provided permissions </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delay</parametername>
</parameternamelist>
<parameterdescription>
<para>- the provided delay in microseconds (cannot exceed INT64_MAX)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the permission is authorized, 0 otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/contracts/sysio/permission.hpp" line="70" column="4" bodyfile="libraries/sysiolib/contracts/sysio/permission.hpp" bodystart="70" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="group__permission_gab62a772ad6b4a4452cc9d73fbb81f908_1gab62a772ad6b4a4452cc9d73fbb81f908" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool sysio::check_transaction_authorization</definition>
        <argsstring>(const transaction &amp;trx, const std::set&lt; permission_level &gt; &amp;provided_permissions, const std::set&lt; public_key &gt; &amp;provided_keys=std::set&lt; public_key &gt;())</argsstring>
        <name>check_transaction_authorization</name>
        <param>
          <type>const <ref refid="classsysio_1_1transaction" kindref="compound">transaction</ref> &amp;</type>
          <declname>trx</declname>
        </param>
        <param>
          <type>const std::set&lt; <ref refid="structsysio_1_1permission__level" kindref="compound">permission_level</ref> &gt; &amp;</type>
          <declname>provided_permissions</declname>
        </param>
        <param>
          <type>const std::set&lt; public_key &gt; &amp;</type>
          <declname>provided_keys</declname>
          <defval>std::set&lt; public_key &gt;()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Checks if a transaction is authorized by a provided set of keys and permissions</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>trx</parametername>
</parameternamelist>
<parameterdescription>
<para>- the transaction for which to check authorizations </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>provided_permissions</parametername>
</parameternamelist>
<parameterdescription>
<para>- the set of permissions which have authorized the transaction (empty permission name acts as wildcard) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>provided_keys</parametername>
</parameternamelist>
<parameterdescription>
<para>- the set of public keys which have authorized the transaction</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether the transaction was authorized by provided keys and permissions </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/contracts/sysio/permission.hpp" line="99" column="4" bodyfile="libraries/sysiolib/contracts/sysio/permission.hpp" bodystart="99" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="group__permission_ga7ac15c61603221ee739ed11a0d7bbc17_1ga7ac15c61603221ee739ed11a0d7bbc17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool sysio::check_permission_authorization</definition>
        <argsstring>(name account, name permission, const std::set&lt; public_key &gt; &amp;provided_keys, const std::set&lt; permission_level &gt; &amp;provided_permissions=std::set&lt; permission_level &gt;(), microseconds provided_delay=microseconds{std::numeric_limits&lt; int64_t &gt;::max()})</argsstring>
        <name>check_permission_authorization</name>
        <param>
          <type><ref refid="structsysio_1_1name" kindref="compound">name</ref></type>
          <declname>account</declname>
        </param>
        <param>
          <type><ref refid="structsysio_1_1name" kindref="compound">name</ref></type>
          <declname>permission</declname>
        </param>
        <param>
          <type>const std::set&lt; public_key &gt; &amp;</type>
          <declname>provided_keys</declname>
        </param>
        <param>
          <type>const std::set&lt; <ref refid="structsysio_1_1permission__level" kindref="compound">permission_level</ref> &gt; &amp;</type>
          <declname>provided_permissions</declname>
          <defval>std::set&lt; <ref refid="structsysio_1_1permission__level" kindref="compound">permission_level</ref> &gt;()</defval>
        </param>
        <param>
          <type><ref refid="classsysio_1_1microseconds" kindref="compound">microseconds</ref></type>
          <declname>provided_delay</declname>
          <defval><ref refid="classsysio_1_1microseconds" kindref="compound">microseconds</ref>{std::numeric_limits&lt; int64_t &gt;::max()}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Checks if a permission is authorized by a provided delay and a provided set of keys and permissions</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>account</parametername>
</parameternamelist>
<parameterdescription>
<para>- the account owner of the permission </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>permission</parametername>
</parameternamelist>
<parameterdescription>
<para>- the permission name to check for authorization </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>provided_keys</parametername>
</parameternamelist>
<parameterdescription>
<para>- the set of public keys which have authorized the transaction </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>provided_permissions</parametername>
</parameternamelist>
<parameterdescription>
<para>- the set of permissions which have authorized the transaction (empty permission name acts as wildcard) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>provided_delay_us</parametername>
</parameternamelist>
<parameterdescription>
<para>- the provided delay in microseconds (cannot exceed INT64_MAX)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether the permission was authorized by provided delay, keys, and permissions </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/contracts/sysio/permission.hpp" line="143" column="4" bodyfile="libraries/sysiolib/contracts/sysio/permission.hpp" bodystart="143" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="group__permission_ga3ebbe3eedd2dee36a776c6a3c4009d02_1ga3ebbe3eedd2dee36a776c6a3c4009d02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsysio_1_1time__point" kindref="compound">time_point</ref></type>
        <definition>time_point sysio::get_permission_last_used</definition>
        <argsstring>(name account, name permission)</argsstring>
        <name>get_permission_last_used</name>
        <param>
          <type><ref refid="structsysio_1_1name" kindref="compound">name</ref></type>
          <declname>account</declname>
        </param>
        <param>
          <type><ref refid="structsysio_1_1name" kindref="compound">name</ref></type>
          <declname>permission</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the last used time of a permission</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>account</parametername>
</parameternamelist>
<parameterdescription>
<para>- the account owner of the permission </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>permission</parametername>
</parameternamelist>
<parameterdescription>
<para>- the name of the permission</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the last used time (in microseconds since Unix epoch) of the permission </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/contracts/sysio/permission.hpp" line="186" column="15" bodyfile="libraries/sysiolib/contracts/sysio/permission.hpp" bodystart="186" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="group__permission_ga1d03c45e00818ab35aff8e4f9d5828e0_1ga1d03c45e00818ab35aff8e4f9d5828e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsysio_1_1time__point" kindref="compound">time_point</ref></type>
        <definition>time_point sysio::get_account_creation_time</definition>
        <argsstring>(name account)</argsstring>
        <name>get_account_creation_time</name>
        <param>
          <type><ref refid="structsysio_1_1name" kindref="compound">name</ref></type>
          <declname>account</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the creation time of an account</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>account</parametername>
</parameternamelist>
<parameterdescription>
<para>- the account</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the creation time (in microseconds since Unix epoch) of the account </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/contracts/sysio/permission.hpp" line="202" column="15" bodyfile="libraries/sysiolib/contracts/sysio/permission.hpp" bodystart="202" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="group__privileged_ga3e6a33d77cd0347d579a81ef4850b6c5_1ga3e6a33d77cd0347d579a81ef4850b6c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sysio::set_blockchain_parameters</definition>
        <argsstring>(const sysio::blockchain_parameters &amp;params)</argsstring>
        <name>set_blockchain_parameters</name>
        <param>
          <type>const <ref refid="structsysio_1_1blockchain__parameters" kindref="compound">sysio::blockchain_parameters</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the blockchain parameters</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>- New blockchain parameters to set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/contracts/sysio/privileged.hpp" line="175" column="9" declfile="libraries/sysiolib/contracts/sysio/privileged.hpp" declline="175" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__privileged_gaf3771599b6ee096789e8533b808186c5_1gaf3771599b6ee096789e8533b808186c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sysio::get_blockchain_parameters</definition>
        <argsstring>(sysio::blockchain_parameters &amp;params)</argsstring>
        <name>get_blockchain_parameters</name>
        <param>
          <type><ref refid="structsysio_1_1blockchain__parameters" kindref="compound">sysio::blockchain_parameters</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieve the blolckchain parameters</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>- It will be replaced with the retrieved blockchain params </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/contracts/sysio/privileged.hpp" line="183" column="9" declfile="libraries/sysiolib/contracts/sysio/privileged.hpp" declline="183" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__privileged_gaf7f07253b6b687a2a6555bc26db70552_1gaf7f07253b6b687a2a6555bc26db70552" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void sysio::get_resource_limits</definition>
        <argsstring>(name account, int64_t &amp;ram_bytes, int64_t &amp;net_weight, int64_t &amp;cpu_weight)</argsstring>
        <name>get_resource_limits</name>
        <param>
          <type><ref refid="structsysio_1_1name" kindref="compound">name</ref></type>
          <declname>account</declname>
        </param>
        <param>
          <type>int64_t &amp;</type>
          <declname>ram_bytes</declname>
        </param>
        <param>
          <type>int64_t &amp;</type>
          <declname>net_weight</declname>
        </param>
        <param>
          <type>int64_t &amp;</type>
          <declname>cpu_weight</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the resource limits of an account</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>account</parametername>
</parameternamelist>
<parameterdescription>
<para>- name of the account whose resource limit to get </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ram_bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>- output to hold retrieved ram limit in absolute bytes </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>net_weight</parametername>
</parameternamelist>
<parameterdescription>
<para>- output to hold net limit </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cpu_weight</parametername>
</parameternamelist>
<parameterdescription>
<para>- output to hold cpu limit </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/contracts/sysio/privileged.hpp" line="194" column="16" bodyfile="libraries/sysiolib/contracts/sysio/privileged.hpp" bodystart="194" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="group__privileged_ga72bf370dd88d10fe4a19d89c24986f1a_1ga72bf370dd88d10fe4a19d89c24986f1a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void sysio::set_resource_limits</definition>
        <argsstring>(name account, int64_t ram_bytes, int64_t net_weight, int64_t cpu_weight)</argsstring>
        <name>set_resource_limits</name>
        <param>
          <type><ref refid="structsysio_1_1name" kindref="compound">name</ref></type>
          <declname>account</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>ram_bytes</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>net_weight</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>cpu_weight</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the resource limits of an account</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>account</parametername>
</parameternamelist>
<parameterdescription>
<para>- name of the account whose resource limit to be set </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ram_bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>- ram limit in absolute bytes </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>net_weight</parametername>
</parameternamelist>
<parameterdescription>
<para>- fractionally proportionate net limit of available resources based on (weight / total_weight_of_all_accounts) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cpu_weight</parametername>
</parameternamelist>
<parameterdescription>
<para>- fractionally proportionate cpu limit of available resources based on (weight / total_weight_of_all_accounts) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/contracts/sysio/privileged.hpp" line="207" column="16" bodyfile="libraries/sysiolib/contracts/sysio/privileged.hpp" bodystart="207" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="group__privileged_ga42818293a8d4bc85b46864814b2714c2_1ga42818293a8d4bc85b46864814b2714c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::optional&lt; uint64_t &gt;</type>
        <definition>std::optional&lt;uint64_t&gt; sysio::set_proposed_producers</definition>
        <argsstring>(const std::vector&lt; producer_key &gt; &amp;prods)</argsstring>
        <name>set_proposed_producers</name>
        <param>
          <type>const std::vector&lt; <ref refid="structsysio_1_1producer__key" kindref="compound">producer_key</ref> &gt; &amp;</type>
          <declname>prods</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Proposes a schedule change using the legacy producer key format</para>
<para><simplesect kind="note"><para>Once the block that contains the proposal becomes irreversible, the schedule is promoted to &quot;pending&quot; automatically. Once the block that promotes the schedule is irreversible, the schedule will become &quot;active&quot; </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>producers</parametername>
</parameternamelist>
<parameterdescription>
<para>- vector of producer keys</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>an optional value of the version of the new proposed schedule if successful </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/contracts/sysio/privileged.hpp" line="220" column="18" declfile="libraries/sysiolib/contracts/sysio/privileged.hpp" declline="220" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="group__privileged_ga166f1a63ca8ccc6ff8a268978b6f2b10_1ga166f1a63ca8ccc6ff8a268978b6f2b10" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::optional&lt; uint64_t &gt;</type>
        <definition>std::optional&lt;uint64_t&gt; sysio::set_proposed_producers</definition>
        <argsstring>(const std::vector&lt; producer_authority &gt; &amp;prods)</argsstring>
        <name>set_proposed_producers</name>
        <param>
          <type>const std::vector&lt; <ref refid="structsysio_1_1producer__authority" kindref="compound">producer_authority</ref> &gt; &amp;</type>
          <declname>prods</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Proposes a schedule change using the more flexible key format</para>
<para><simplesect kind="note"><para>Once the block that contains the proposal becomes irreversible, the schedule is promoted to &quot;pending&quot; automatically. Once the block that promotes the schedule is irreversible, the schedule will become &quot;active&quot; </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>producers</parametername>
</parameternamelist>
<parameterdescription>
<para>- vector of producer authorities</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>an optional value of the version of the new proposed schedule if successful </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/contracts/sysio/privileged.hpp" line="231" column="25" bodyfile="libraries/sysiolib/contracts/sysio/privileged.hpp" bodystart="231" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="group__privileged_ga3d143655999ef472c02bf92b84174781_1ga3d143655999ef472c02bf92b84174781" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool sysio::is_privileged</definition>
        <argsstring>(name account)</argsstring>
        <name>is_privileged</name>
        <param>
          <type><ref refid="structsysio_1_1name" kindref="compound">name</ref></type>
          <declname>account</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check if an account is privileged</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>account</parametername>
</parameternamelist>
<parameterdescription>
<para>- name of the account to be checked </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the account is privileged </para>
</simplesect>
<simplesect kind="return"><para>false if the account is not privileged </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/contracts/sysio/privileged.hpp" line="247" column="16" bodyfile="libraries/sysiolib/contracts/sysio/privileged.hpp" bodystart="247" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="group__privileged_ga66f12c1f562eac7fd45a7979bfa2847f_1ga66f12c1f562eac7fd45a7979bfa2847f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void sysio::set_privileged</definition>
        <argsstring>(name account, bool is_priv)</argsstring>
        <name>set_privileged</name>
        <param>
          <type><ref refid="structsysio_1_1name" kindref="compound">name</ref></type>
          <declname>account</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_priv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the privileged status of an account</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>account</parametername>
</parameternamelist>
<parameterdescription>
<para>- name of the account whose privileged account to be set </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is_priv</parametername>
</parameternamelist>
<parameterdescription>
<para>- privileged status </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/contracts/sysio/privileged.hpp" line="258" column="16" bodyfile="libraries/sysiolib/contracts/sysio/privileged.hpp" bodystart="258" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="group__privileged_ga783f438d474d0f4681f7aa185fd407f4_1ga783f438d474d0f4681f7aa185fd407f4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void sysio::preactivate_feature</definition>
        <argsstring>(const checksum256 &amp;feature_digest)</argsstring>
        <name>preactivate_feature</name>
        <param>
          <type>const checksum256 &amp;</type>
          <declname>feature_digest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pre-activate protocol feature</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>feature_digest</parametername>
</parameternamelist>
<parameterdescription>
<para>- digest of the protocol feature to pre-activate </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/contracts/sysio/privileged.hpp" line="268" column="16" bodyfile="libraries/sysiolib/contracts/sysio/privileged.hpp" bodystart="268" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="group__producer__schedule_ga0ad2d99c379fb754447256453c728543_1ga0ad2d99c379fb754447256453c728543" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="structsysio_1_1name" kindref="compound">name</ref> &gt;</type>
        <definition>std::vector&lt;name&gt; sysio::get_active_producers</definition>
        <argsstring>()</argsstring>
        <name>get_active_producers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns back the list of active producer names. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/contracts/sysio/producer_schedule.hpp" line="171" column="16" declfile="libraries/sysiolib/contracts/sysio/producer_schedule.hpp" declline="171" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__security__group_ga93fb1a1ab44dec2ef304bfaf0178072d_1ga93fb1a1ab44dec2ef304bfaf0178072d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t sysio::add_security_group_participants</definition>
        <argsstring>(const std::set&lt; name &gt; &amp;participants)</argsstring>
        <name>add_security_group_participants</name>
        <param>
          <type>const std::set&lt; <ref refid="structsysio_1_1name" kindref="compound">name</ref> &gt; &amp;</type>
          <declname>participants</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Propose new participants to the security group.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>participants</parametername>
</parameternamelist>
<parameterdescription>
<para>- the participants.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>-1 if proposing a new security group was unsuccessful, otherwise returns 0. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/contracts/sysio/security_group.hpp" line="40" column="16" bodyfile="libraries/sysiolib/contracts/sysio/security_group.hpp" bodystart="40" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="group__security__group_gaaa867999824dc6dc6bade8c0b9332371_1gaaa867999824dc6dc6bade8c0b9332371" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t sysio::remove_security_group_participants</definition>
        <argsstring>(const std::set&lt; name &gt; &amp;participants)</argsstring>
        <name>remove_security_group_participants</name>
        <param>
          <type>const std::set&lt; <ref refid="structsysio_1_1name" kindref="compound">name</ref> &gt; &amp;</type>
          <declname>participants</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Propose to remove participants from the security group. å</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>participants</parametername>
</parameternamelist>
<parameterdescription>
<para>- the participants. å </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>-1 if proposing a new security group was unsuccessful, otherwise returns 0. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/contracts/sysio/security_group.hpp" line="53" column="16" bodyfile="libraries/sysiolib/contracts/sysio/security_group.hpp" bodystart="53" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="group__security__group_ga0d4c0f09cc7f9eba177db554d9abf073_1ga0d4c0f09cc7f9eba177db554d9abf073" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool sysio::in_active_security_group</definition>
        <argsstring>(const std::set&lt; name &gt; &amp;participants)</argsstring>
        <name>in_active_security_group</name>
        <param>
          <type>const std::set&lt; <ref refid="structsysio_1_1name" kindref="compound">name</ref> &gt; &amp;</type>
          <declname>participants</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check if the specified accounts are all in the active security group.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>participants</parametername>
</parameternamelist>
<parameterdescription>
<para>- the participants.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns true if the specified accounts are all in the active security group. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/contracts/sysio/security_group.hpp" line="66" column="13" bodyfile="libraries/sysiolib/contracts/sysio/security_group.hpp" bodystart="66" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="group__security__group_ga1543736e4e36640b83143b4a668bcf89_1ga1543736e4e36640b83143b4a668bcf89" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structsysio_1_1security__group" kindref="compound">security_group</ref></type>
        <definition>security_group sysio::get_active_security_group</definition>
        <argsstring>()</argsstring>
        <name>get_active_security_group</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the active security group</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">packed_security_group</parametername>
</parameternamelist>
<parameterdescription>
<para>- the buffer containing the packed <ref refid="structsysio_1_1security__group" kindref="compound">security_group</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns the size required in the buffer (if the buffer is too small, nothing is written). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/contracts/sysio/security_group.hpp" line="80" column="23" bodyfile="libraries/sysiolib/contracts/sysio/security_group.hpp" bodystart="80" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="group__system_gae987dd898961af1231142a37a4461611_1gae987dd898961af1231142a37a4461611" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void sysio::sysio_exit</definition>
        <argsstring>(int32_t code)</argsstring>
        <name>sysio_exit</name>
        <param>
          <type>int32_t</type>
          <declname>code</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method will abort execution of wasm without failing the contract. This is used to bypass all cleanup / destructors that would normally be called.</para>
<para>&lt;html&gt;</para>
<para><bold> WARNING: this method will immediately abort execution of wasm code that is on the stack and would be executed as the method normally returned. Problems can occur with write-caches, RAII, reference counting when this method aborts execution of wasm code immediately. </bold></para>
<para>&lt;/html&gt;</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>- the exit code Example:</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<programlisting><codeline><highlight class="normal">sysio_exit(0);</highlight></codeline>
<codeline><highlight class="normal">sysio_exit(1);</highlight></codeline>
<codeline><highlight class="normal">sysio_exit(2);</highlight></codeline>
<codeline><highlight class="normal">sysio_exit(3);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/contracts/sysio/system.hpp" line="62" column="16" bodyfile="libraries/sysiolib/contracts/sysio/system.hpp" bodystart="62" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="group__system_ga6a9fba6c93fcad4e6089f6dae813bdc7_1ga6a9fba6c93fcad4e6089f6dae813bdc7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsysio_1_1time__point" kindref="compound">time_point</ref></type>
        <definition>time_point sysio::current_time_point</definition>
        <argsstring>()</argsstring>
        <name>current_time_point</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the time in microseconds from 1970 of the current block as a <ref refid="classsysio_1_1time__point" kindref="compound">time_point</ref></para>
<para><simplesect kind="return"><para>time in microseconds from 1970 of the current block as a <ref refid="classsysio_1_1time__point" kindref="compound">time_point</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/contracts/sysio/system.hpp" line="72" column="15" declfile="libraries/sysiolib/contracts/sysio/system.hpp" declline="72" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__system_ga12c423e9a5c7c036b417f4f0db2c0b98_1ga12c423e9a5c7c036b417f4f0db2c0b98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsysio_1_1block__timestamp" kindref="compound">block_timestamp</ref></type>
        <definition>block_timestamp sysio::current_block_time</definition>
        <argsstring>()</argsstring>
        <name>current_block_time</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the time in microseconds from 1970 of the current block as a <ref refid="classsysio_1_1block__timestamp" kindref="compound">block_timestamp</ref></para>
<para><simplesect kind="return"><para>time in microseconds from 1970 of the current block as a <ref refid="classsysio_1_1block__timestamp" kindref="compound">block_timestamp</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/contracts/sysio/system.hpp" line="80" column="20" declfile="libraries/sysiolib/contracts/sysio/system.hpp" declline="80" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="group__system_ga393d227e5bf35a244f435b9d212b4b0e_1ga393d227e5bf35a244f435b9d212b4b0e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacesysio_a252baef5945efdf97b45a27826131e16_1a252baef5945efdf97b45a27826131e16" kindref="member">block_num_t</ref></type>
        <definition>block_num_t sysio::current_block_number</definition>
        <argsstring>()</argsstring>
        <name>current_block_number</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the current block number</para>
<para><simplesect kind="return"><para>the current block number </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/contracts/sysio/system.hpp" line="90" column="23" bodyfile="libraries/sysiolib/contracts/sysio/system.hpp" bodystart="90" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="group__system_gacab202f036dce91e3094765f9490469d_1gacab202f036dce91e3094765f9490469d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool sysio::is_feature_activated</definition>
        <argsstring>(const checksum256 &amp;feature_digest)</argsstring>
        <name>is_feature_activated</name>
        <param>
          <type>const checksum256 &amp;</type>
          <declname>feature_digest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check if specified protocol feature has been activated</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>feature_digest</parametername>
</parameternamelist>
<parameterdescription>
<para>- digest of the protocol feature </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the specified protocol feature has been activated, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/contracts/sysio/system.hpp" line="101" column="16" bodyfile="libraries/sysiolib/contracts/sysio/system.hpp" bodystart="101" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="group__system_ga31252e36bebf5c09875571507d43b6af_1ga31252e36bebf5c09875571507d43b6af" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structsysio_1_1name" kindref="compound">name</ref></type>
        <definition>name sysio::get_sender</definition>
        <argsstring>()</argsstring>
        <name>get_sender</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return name of account that sent current inline action</para>
<para><simplesect kind="return"><para>name of account that sent the current inline action (empty name if not called from inline action) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/contracts/sysio/system.hpp" line="114" column="16" bodyfile="libraries/sysiolib/contracts/sysio/system.hpp" bodystart="114" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="group__transaction_gaac121ad3e7c952c4b04c12f8bfcc29c3_1gaac121ad3e7c952c4b04c12f8bfcc29c3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void sysio::send_deferred</definition>
        <argsstring>(const uint128_t &amp;sender_id, name payer, const char *serialized_transaction, size_t size, bool replace=false)</argsstring>
        <name>send_deferred</name>
        <param>
          <type>const uint128_t &amp;</type>
          <declname>sender_id</declname>
        </param>
        <param>
          <type><ref refid="structsysio_1_1name" kindref="compound">name</ref></type>
          <declname>payer</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>serialized_transaction</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>replace</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Send a deferred transaction</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sender_id</parametername>
</parameternamelist>
<parameterdescription>
<para>- Account name of the sender of this deferred transaction </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>payer</parametername>
</parameternamelist>
<parameterdescription>
<para>- Account name responsible for paying the RAM for this deferred transaction </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>serialized_transaction</parametername>
</parameternamelist>
<parameterdescription>
<para>- The packed transaction to be deferred </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>- The size of the packed transaction, required for persistence. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>replace</parametername>
</parameternamelist>
<parameterdescription>
<para>- If true, will replace an existing transaction. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/contracts/sysio/transaction.hpp" line="175" column="16" bodyfile="libraries/sysiolib/contracts/sysio/transaction.hpp" bodystart="175" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="group__transaction_ga5cb1f314e639ee0d5d0bd59f51b2229e_1ga5cb1f314e639ee0d5d0bd59f51b2229e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structsysio_1_1action" kindref="compound">action</ref></type>
        <definition>action sysio::get_action</definition>
        <argsstring>(uint32_t type, uint32_t index)</argsstring>
        <name>get_action</name>
        <param>
          <type>uint32_t</type>
          <declname>type</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieve the indicated action from the active transaction.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>- 0 for context free action, 1 for action </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>- the index of the requested action </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the indicated action </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/contracts/sysio/transaction.hpp" line="186" column="18" bodyfile="libraries/sysiolib/contracts/sysio/transaction.hpp" bodystart="186" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="group__transaction_gadc099e4301c8682be070211a094ad66c_1gadc099e4301c8682be070211a094ad66c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t sysio::read_transaction</definition>
        <argsstring>(char *ptr, size_t sz)</argsstring>
        <name>read_transaction</name>
        <param>
          <type>char *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Access a copy of the currently executing transaction.</para>
<para><simplesect kind="return"><para>the currently executing transaction </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/contracts/sysio/transaction.hpp" line="203" column="18" bodyfile="libraries/sysiolib/contracts/sysio/transaction.hpp" bodystart="203" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="group__transaction_gadc1dc4e5e52f1c12f37eb02d8783a47f_1gadc1dc4e5e52f1c12f37eb02d8783a47f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int sysio::cancel_deferred</definition>
        <argsstring>(const uint128_t &amp;sender_id)</argsstring>
        <name>cancel_deferred</name>
        <param>
          <type>const uint128_t &amp;</type>
          <declname>sender_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Cancels a deferred transaction.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sender_id</parametername>
</parameternamelist>
<parameterdescription>
<para>- The id of the sender</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para>The deferred transaction ID exists. </para>
</simplesect>
<simplesect kind="pre"><para>The deferred transaction ID has not yet been published. </para>
</simplesect>
<simplesect kind="post"><para>Deferred transaction canceled.</para>
</simplesect>
<simplesect kind="return"><para>1 if transaction was canceled, 0 if transaction was not found</para>
</simplesect>
Example:</para>
<para><programlisting><codeline><highlight class="normal">id<sp/>=<sp/>0xffffffffffffffff</highlight></codeline>
<codeline><highlight class="normal">cancel_deferred(<sp/>id<sp/>);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/contracts/sysio/transaction.hpp" line="226" column="15" bodyfile="libraries/sysiolib/contracts/sysio/transaction.hpp" bodystart="226" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="group__transaction_gafbd3369e48c587ede72b918fe36e2a52_1gafbd3369e48c587ede72b918fe36e2a52" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t sysio::transaction_size</definition>
        <argsstring>()</argsstring>
        <name>transaction_size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the size of the currently executing transaction.</para>
<para><simplesect kind="return"><para>size of the currently executing transaction </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/contracts/sysio/transaction.hpp" line="236" column="18" bodyfile="libraries/sysiolib/contracts/sysio/transaction.hpp" bodystart="236" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="group__transaction_gae23a5dae01630e656c5972f3812438dc_1gae23a5dae01630e656c5972f3812438dc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int sysio::tapos_block_num</definition>
        <argsstring>()</argsstring>
        <name>tapos_block_num</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the block number used for TAPOS on the currently executing transaction.</para>
<para><simplesect kind="return"><para>block number used for TAPOS on the currently executing transaction Example: <programlisting><codeline><highlight class="normal">int<sp/>tbn<sp/>=<sp/>tapos_block_num();</highlight></codeline>
</programlisting> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/contracts/sysio/transaction.hpp" line="250" column="15" bodyfile="libraries/sysiolib/contracts/sysio/transaction.hpp" bodystart="250" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="group__transaction_gafc9b5c3111cd62bce49b3f32942472b2_1gafc9b5c3111cd62bce49b3f32942472b2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int sysio::tapos_block_prefix</definition>
        <argsstring>()</argsstring>
        <name>tapos_block_prefix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the block prefix used for TAPOS on the currently executing transaction.</para>
<para><simplesect kind="return"><para>block prefix used for TAPOS on the currently executing transaction Example: <programlisting><codeline><highlight class="normal">int<sp/>tbp<sp/>=<sp/>tapos_block_prefix();</highlight></codeline>
</programlisting> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/contracts/sysio/transaction.hpp" line="264" column="15" bodyfile="libraries/sysiolib/contracts/sysio/transaction.hpp" bodystart="264" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="group__transaction_ga9ba8258ea769264b95abd46081a501a6_1ga9ba8258ea769264b95abd46081a501a6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t sysio::expiration</definition>
        <argsstring>()</argsstring>
        <name>expiration</name>
        <briefdescription>
<para>Gets the expiration of the currently executing transaction. </para>
        </briefdescription>
        <detaileddescription>
<para>Gets the expiration of the currently executing transaction.</para>
<para><simplesect kind="return"><para>expiration of the currently executing transaction in seconds since Unix epoch </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/contracts/sysio/transaction.hpp" line="275" column="20" bodyfile="libraries/sysiolib/contracts/sysio/transaction.hpp" bodystart="275" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="group__transaction_gaef211984436ac3d7d0eaabb647b0dab0_1gaef211984436ac3d7d0eaabb647b0dab0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int sysio::get_context_free_data</definition>
        <argsstring>(uint32_t index, char *buff, size_t size)</argsstring>
        <name>get_context_free_data</name>
        <param>
          <type>uint32_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buff</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieve the signed_transaction.context_free_data[index].</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>- the index of the context_free_data entry to retrieve </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buff</parametername>
</parameternamelist>
<parameterdescription>
<para>- output buff of the context_free_data entry </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>- amount of context_free_data[index] to retrieve into buff, 0 to report required size </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>size copied, or context_free_data[index].<ref refid="namespacesysio_1_1internal__use__do__not__use_a559456a47e2a0a9cc4bf093662e53d31_1a559456a47e2a0a9cc4bf093662e53d31" kindref="member">size()</ref> if 0 passed for size, or -1 if index not valid </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/contracts/sysio/transaction.hpp" line="288" column="15" bodyfile="libraries/sysiolib/contracts/sysio/transaction.hpp" bodystart="288" bodyend="290"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="libraries/sysiolib/core/sysio/asset.hpp" line="11" column="1"/>
  </compounddef>
</doxygen>
