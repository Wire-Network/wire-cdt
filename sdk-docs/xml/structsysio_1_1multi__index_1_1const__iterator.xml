<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="structsysio_1_1multi__index_1_1const__iterator" kind="struct" language="C++" prot="public">
    <compoundname>sysio::multi_index::const_iterator</compoundname>
    <basecompoundref prot="public" virt="non-virtual">std::iterator&lt; std::bidirectional_iterator_tag, const T &gt;</basecompoundref>
    <includes refid="multi__index_8hpp" local="no">multi_index.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structsysio_1_1multi__index_1_1const__iterator_1a7f78b0f7c57ccc6af2ef597b8a07ea3e" prot="private" static="no" mutable="no">
        <type>const <ref refid="classsysio_1_1multi__index" kindref="compound">multi_index</ref> *</type>
        <definition>const multi_index* sysio::multi_index&lt; TableName, T, Indices &gt;::const_iterator::_multidx</definition>
        <argsstring></argsstring>
        <name>_multidx</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/contracts/sysio/multi_index.hpp" line="983" column="31" bodyfile="libraries/sysiolib/contracts/sysio/multi_index.hpp" bodystart="983" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structsysio_1_1multi__index_1_1const__iterator_1a372215961078836d14e8a5ab3c0d2342" prot="private" static="no" mutable="no">
        <type>const item *</type>
        <definition>const item* sysio::multi_index&lt; TableName, T, Indices &gt;::const_iterator::_item</definition>
        <argsstring></argsstring>
        <name>_item</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/contracts/sysio/multi_index.hpp" line="984" column="31" bodyfile="libraries/sysiolib/contracts/sysio/multi_index.hpp" bodystart="984" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="structsysio_1_1multi__index_1_1const__iterator_a474ad2ee1333aa717a29bb55a9d5fc44_1a474ad2ee1333aa717a29bb55a9d5fc44" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class multi_index</definition>
        <argsstring></argsstring>
        <name>multi_index</name>
        <param>
          <type><ref refid="classsysio_1_1multi__index" kindref="compound">multi_index</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/contracts/sysio/multi_index.hpp" line="985" column="13" bodyfile="libraries/sysiolib/contracts/sysio/multi_index.hpp" bodystart="985" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="structsysio_1_1multi__index_1_1const__iterator_ab0ac7de651351823aece097eb3be1cfb_1ab0ac7de651351823aece097eb3be1cfb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const const_iterator &amp;a, const const_iterator &amp;b)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structsysio_1_1multi__index_1_1const__iterator" kindref="compound">const_iterator</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structsysio_1_1multi__index_1_1const__iterator" kindref="compound">const_iterator</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/contracts/sysio/multi_index.hpp" line="928" column="22" bodyfile="libraries/sysiolib/contracts/sysio/multi_index.hpp" bodystart="928" bodyend="930"/>
      </memberdef>
      <memberdef kind="friend" id="structsysio_1_1multi__index_1_1const__iterator_a5fbca5b71055f2b793ae1607239b13a0_1a5fbca5b71055f2b793ae1607239b13a0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const const_iterator &amp;a, const const_iterator &amp;b)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="structsysio_1_1multi__index_1_1const__iterator" kindref="compound">const_iterator</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structsysio_1_1multi__index_1_1const__iterator" kindref="compound">const_iterator</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/contracts/sysio/multi_index.hpp" line="931" column="22" bodyfile="libraries/sysiolib/contracts/sysio/multi_index.hpp" bodystart="931" bodyend="933"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structsysio_1_1multi__index_1_1const__iterator_a507879cc40271c9c020e4d8de536c32d_1a507879cc40271c9c020e4d8de536c32d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T&amp; sysio::multi_index&lt; TableName, T, Indices &gt;::const_iterator::operator*</definition>
        <argsstring>() const</argsstring>
        <name>operator*</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/contracts/sysio/multi_index.hpp" line="935" column="18" bodyfile="libraries/sysiolib/contracts/sysio/multi_index.hpp" bodystart="935" bodyend="935"/>
      </memberdef>
      <memberdef kind="function" id="structsysio_1_1multi__index_1_1const__iterator_a1cdd54f16f2afe15ec4a5febcd2be6e2_1a1cdd54f16f2afe15ec4a5febcd2be6e2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const T *</type>
        <definition>const T* sysio::multi_index&lt; TableName, T, Indices &gt;::const_iterator::operator-&gt;</definition>
        <argsstring>() const</argsstring>
        <name>operator-&gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/contracts/sysio/multi_index.hpp" line="936" column="18" bodyfile="libraries/sysiolib/contracts/sysio/multi_index.hpp" bodystart="936" bodyend="936"/>
      </memberdef>
      <memberdef kind="function" id="structsysio_1_1multi__index_1_1const__iterator_a6a204d7012b78df1cb06b577c1740229_1a6a204d7012b78df1cb06b577c1740229" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structsysio_1_1multi__index_1_1const__iterator" kindref="compound">const_iterator</ref></type>
        <definition>const_iterator sysio::multi_index&lt; TableName, T, Indices &gt;::const_iterator::operator++</definition>
        <argsstring>(int)</argsstring>
        <name>operator++</name>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/contracts/sysio/multi_index.hpp" line="938" column="25" bodyfile="libraries/sysiolib/contracts/sysio/multi_index.hpp" bodystart="938" bodyend="942"/>
      </memberdef>
      <memberdef kind="function" id="structsysio_1_1multi__index_1_1const__iterator_a4dd4b652199f04f7a36422b6c9f71a73_1a4dd4b652199f04f7a36422b6c9f71a73" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structsysio_1_1multi__index_1_1const__iterator" kindref="compound">const_iterator</ref></type>
        <definition>const_iterator sysio::multi_index&lt; TableName, T, Indices &gt;::const_iterator::operator--</definition>
        <argsstring>(int)</argsstring>
        <name>operator--</name>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/contracts/sysio/multi_index.hpp" line="944" column="25" bodyfile="libraries/sysiolib/contracts/sysio/multi_index.hpp" bodystart="944" bodyend="948"/>
      </memberdef>
      <memberdef kind="function" id="structsysio_1_1multi__index_1_1const__iterator_af95b8b6aab66718df245acc91ff0c9a8_1af95b8b6aab66718df245acc91ff0c9a8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structsysio_1_1multi__index_1_1const__iterator" kindref="compound">const_iterator</ref> &amp;</type>
        <definition>const_iterator&amp; sysio::multi_index&lt; TableName, T, Indices &gt;::const_iterator::operator++</definition>
        <argsstring>()</argsstring>
        <name>operator++</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/contracts/sysio/multi_index.hpp" line="950" column="25" bodyfile="libraries/sysiolib/contracts/sysio/multi_index.hpp" bodystart="950" bodyend="960"/>
      </memberdef>
      <memberdef kind="function" id="structsysio_1_1multi__index_1_1const__iterator_a7c00911905bc8f7178685d1d492fe100_1a7c00911905bc8f7178685d1d492fe100" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structsysio_1_1multi__index_1_1const__iterator" kindref="compound">const_iterator</ref> &amp;</type>
        <definition>const_iterator&amp; sysio::multi_index&lt; TableName, T, Indices &gt;::const_iterator::operator--</definition>
        <argsstring>()</argsstring>
        <name>operator--</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/contracts/sysio/multi_index.hpp" line="961" column="25" bodyfile="libraries/sysiolib/contracts/sysio/multi_index.hpp" bodystart="961" bodyend="977"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="structsysio_1_1multi__index_1_1const__iterator_1acae5dd9624162eae09169f86c811a082" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>sysio::multi_index&lt; TableName, T, Indices &gt;::const_iterator::const_iterator</definition>
        <argsstring>(const multi_index *mi, const item *i=nullptr)</argsstring>
        <name>const_iterator</name>
        <param>
          <type>const <ref refid="classsysio_1_1multi__index" kindref="compound">multi_index</ref> *</type>
          <declname>mi</declname>
        </param>
        <param>
          <type>const item *</type>
          <declname>i</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/sysiolib/contracts/sysio/multi_index.hpp" line="980" column="13" bodyfile="libraries/sysiolib/contracts/sysio/multi_index.hpp" bodystart="980" bodyend="981"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>std::iterator&lt; std::bidirectional_iterator_tag, const T &gt;</label>
      </node>
      <node id="1">
        <label>sysio::multi_index&lt; TableName, T, Indices &gt;::const_iterator</label>
        <link refid="structsysio_1_1multi__index_1_1const__iterator"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>std::iterator&lt; std::bidirectional_iterator_tag, const T &gt;</label>
      </node>
      <node id="1">
        <label>sysio::multi_index&lt; TableName, T, Indices &gt;::const_iterator</label>
        <link refid="structsysio_1_1multi__index_1_1const__iterator"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="libraries/sysiolib/contracts/sysio/multi_index.hpp" line="927" column="7" bodyfile="libraries/sysiolib/contracts/sysio/multi_index.hpp" bodystart="927" bodyend="986"/>
    <listofallmembers>
      <member refid="structsysio_1_1multi__index_1_1const__iterator_1a372215961078836d14e8a5ab3c0d2342" prot="private" virt="non-virtual"><scope>sysio::multi_index::const_iterator</scope><name>_item</name></member>
      <member refid="structsysio_1_1multi__index_1_1const__iterator_1a7f78b0f7c57ccc6af2ef597b8a07ea3e" prot="private" virt="non-virtual"><scope>sysio::multi_index::const_iterator</scope><name>_multidx</name></member>
      <member refid="structsysio_1_1multi__index_1_1const__iterator_1acae5dd9624162eae09169f86c811a082" prot="private" virt="non-virtual"><scope>sysio::multi_index::const_iterator</scope><name>const_iterator</name></member>
      <member refid="structsysio_1_1multi__index_1_1const__iterator_a474ad2ee1333aa717a29bb55a9d5fc44_1a474ad2ee1333aa717a29bb55a9d5fc44" prot="private" virt="non-virtual"><scope>sysio::multi_index::const_iterator</scope><name>multi_index</name></member>
      <member refid="structsysio_1_1multi__index_1_1const__iterator_a5fbca5b71055f2b793ae1607239b13a0_1a5fbca5b71055f2b793ae1607239b13a0" prot="public" virt="non-virtual"><scope>sysio::multi_index::const_iterator</scope><name>operator!=</name></member>
      <member refid="structsysio_1_1multi__index_1_1const__iterator_a507879cc40271c9c020e4d8de536c32d_1a507879cc40271c9c020e4d8de536c32d" prot="public" virt="non-virtual"><scope>sysio::multi_index::const_iterator</scope><name>operator*</name></member>
      <member refid="structsysio_1_1multi__index_1_1const__iterator_a6a204d7012b78df1cb06b577c1740229_1a6a204d7012b78df1cb06b577c1740229" prot="public" virt="non-virtual"><scope>sysio::multi_index::const_iterator</scope><name>operator++</name></member>
      <member refid="structsysio_1_1multi__index_1_1const__iterator_af95b8b6aab66718df245acc91ff0c9a8_1af95b8b6aab66718df245acc91ff0c9a8" prot="public" virt="non-virtual"><scope>sysio::multi_index::const_iterator</scope><name>operator++</name></member>
      <member refid="structsysio_1_1multi__index_1_1const__iterator_a4dd4b652199f04f7a36422b6c9f71a73_1a4dd4b652199f04f7a36422b6c9f71a73" prot="public" virt="non-virtual"><scope>sysio::multi_index::const_iterator</scope><name>operator--</name></member>
      <member refid="structsysio_1_1multi__index_1_1const__iterator_a7c00911905bc8f7178685d1d492fe100_1a7c00911905bc8f7178685d1d492fe100" prot="public" virt="non-virtual"><scope>sysio::multi_index::const_iterator</scope><name>operator--</name></member>
      <member refid="structsysio_1_1multi__index_1_1const__iterator_a1cdd54f16f2afe15ec4a5febcd2be6e2_1a1cdd54f16f2afe15ec4a5febcd2be6e2" prot="public" virt="non-virtual"><scope>sysio::multi_index::const_iterator</scope><name>operator-&gt;</name></member>
      <member refid="structsysio_1_1multi__index_1_1const__iterator_ab0ac7de651351823aece097eb3be1cfb_1ab0ac7de651351823aece097eb3be1cfb" prot="public" virt="non-virtual"><scope>sysio::multi_index::const_iterator</scope><name>operator==</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
